{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>  WordOps site - Community forum -  F.A.Q </p> Migration from EasyEngine v3 Getting started Commands"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Easy to install : One step automated installer with migration from EasyEngine v3 support</li> <li>Fast deployment : Fast and automated WordPress, Nginx, PHP, MySQL &amp; Redis installation</li> <li>Custom Nginx build : Nginx 1.26.1 - TLS v1.3 with HTTP/3 QUIC &amp; Brotli support</li> <li>Up-to-date : PHP 7.4, 8.0, 8.1, 8.2 &amp; 8.3 - MariaDB 11.4 &amp; Redis 7.0</li> <li>Secured : Hardened WordPress security with strict Nginx location directives</li> <li>Powerful : Optimized Nginx configurations with multiple cache backends support</li> <li>SSL : Domain, Subdomain &amp; Wildcard Let's Encrypt SSL certificates with DNS API support</li> <li>Modern : Strong ciphers_suite, modern TLS protocols and HSTS support (Grade A+ on ssllabs)</li> <li>Monitoring : Live Nginx vhost traffic with ngx_vts_module and server monitoring with Netdata</li> <li>User Friendly : WordOps dashboard with server status/monitoring and tools (demo)</li> <li>Release cycle : WordOps stable releases are published in June and December.</li> </ul>"},{"location":"#getting-support","title":"Getting Support","text":"<p>If you do not find the informations you were looking for in our documentation, you can still ask your question on our Community Forum. If you think you have found an issue directly related to WordOps, please open an issue on the Github repository</p>"},{"location":"#credits","title":"Credits","text":"<ul> <li>EasyEngine</li> </ul> <p> This documentation is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</p>"},{"location":"commands/","title":"WordOps commands","text":"<p>The WordOps commands structure:</p> <pre><code>wo (command) [options]\n</code></pre>"},{"location":"commands/#overview","title":"Overview","text":"command feature example site create, update, delete, list sites <code>wo site create site.tld --wp</code> stack install/remove WordOps server stacks <code>wo stack install --nginx</code> debug commands to do server level debugging <code>wo debug site.tld --php</code> clean clean Wordops cache backend <code>wo clean --fastcgi</code> info display server stack informations <code>wo info --nginx</code> log perform operation on logs <code>wo log show --nginx</code> secure manage WordOps backend authentification <code>wo secure --auth</code> maintenance perform server package updates <code>wo maintenance</code> update update WordOps <code>wo update</code>"},{"location":"faq/","title":"F.A.Q","text":""},{"location":"faq/#general","title":"General","text":""},{"location":"faq/#what-is-wordops","title":"What is WordOps ?","text":"<p>WordOps is a command line tool which ease server administration and WordPress deployment by providing the ability to setup an optimized LEMP stack (Nginx, PHP, MySQL) with simple command like <code>wo stack install --nginx</code>.</p>"},{"location":"faq/#what-are-wordops-main-features","title":"What are WordOps main features ?","text":"<p>WordOps not only installs and configures the packages needed to deploy a site (Nginx, PHP, MariaDB) but it also takes care of creating Nginx vhosts and the database, installing WordPress and even get a Let's Encrypt SSL certificate, all in one command line. It support multiple cache backend for WordPress, including Nginx fastcgi_cache, Redis cache (full-page cache + object cache) or wp-super-cache, based on a highly optimized Nginx configuration and an hardened security with strict location directives.</p>"},{"location":"faq/#which-operating-systems-are-supported-by-wordops","title":"Which operating systems are supported by WordOps ?","text":"<p>WordOps can be installed on Ubuntu LTS (Long Term Service) releases (18.04, 20.04 &amp; 22.04). We do not officialy support Debian distribution (Debian 10/11 &amp; Raspbian 10/11) because we are not able to run our continuous integration on it. Support for other linux distribution isn't planned.</p>"},{"location":"faq/#technical","title":"Technical","text":""},{"location":"faq/#which-version-of-php-does-wordops-support","title":"Which version of PHP does WordOps support ?","text":"<p>WordOps support PHP 8.2 (default) 7.4, 8.1 &amp; 8.3</p>"},{"location":"faq/#what-is-the-best-caching-solution-for-wordpress","title":"What is the best caching solution for WordPress ?","text":"<p>There is no \"best solution\", because there are benefits/disadvantage for each caching solution and it depend on your usage.</p> <p>Here some informations:</p> Cache backend command argument description fastcgi_cache <code>--wpfc</code> the simplest solution, because it do not rely on any plugin excepted nginx_helper used to purge cache after content updates redis-cache <code>--wpredis</code> powerful solution which support multi-server setup and it provide full-page cache in redis via Nginx + object-cache via Redis-Object-Cache plugin (optional) wp-super-cache <code>--wpsc</code> basic solution based on a plugin which create and serve static html files. wp-rocket <code>--wprocket</code> solution based on a popular premium plugin with several additional features, compatible with Woocommerce and the most part of plugins cache-enabler <code>--wpce</code> solution based on an open-source plugin from keycdn"},{"location":"faq/#how-to-access-to-wordops-dashboard","title":"How to access to WordOps Dashboard ?","text":"<p>WordOps dashboard is available on <code>https://YOUR.SERVER.IP:22222</code> or <code>https://YOUR.SERVER.HOSTNAME:22222</code></p>"},{"location":"faq/#what-is-the-userpassword-of-the-web-filemanager","title":"What is the user/password of the web filemanager ?","text":"<p>By default, user is admin and password too. After you logged in for the first time, you will have to change this password</p>"},{"location":"faq/#why-do-i-get-warning-from-my-web-browser-when-opening-wordops-backend","title":"Why do I get warning from my web browser when opening WordOps backend ?","text":"<p>At the moment, WordOps backend is secured with a self-signed SSL certificate, which provide the same level of encryption than any other certificate but do not come from a certificate authority. Your Web browser only warn you about the fact that the certificate wasn't issued by a trusted certificate authority. We are already working on adding the ability to secure WordOps backend with a letsencrypt SSL certificate.</p>"},{"location":"faq/#does-nginx-wo-support-tlsv13","title":"Does Nginx-wo support TLSv1.3 ?","text":"<p>Yes, since the release v3.9.5.4, our Nginx package support TLSv1.3.</p>"},{"location":"faq/#is-wordops-lets-encrypt-stack-compatible-with-cloudflare-cdn","title":"Is WordOps Let's Encrypt stack compatible with Cloudflare CDN ?","text":"<p>WordOps Let's Encrypt stack is fully compatible with Cloudflare CDN, and you can use Cloudflare DNS API to issue your certificates even if the domain is not pointed to your server IP.</p>"},{"location":"faq/#how-to-uninstall-wordops","title":"How to uninstall WordOps ?","text":"<p>If you need/want to uninstall WordOps, you can use the following commands:</p> <p>Warning</p> <p>Make a backup of your databases before purging wordops packages</p> <pre><code># purge wordops packages (nginx, mysql, php etc..)\nwo stack purge --all\n\n# uninstall wordops\nwget -qO wo wops.cc &amp;&amp; sudo bash wo --purge\n</code></pre>"},{"location":"guides/","title":"Guides &amp; Tutorials","text":""},{"location":"guides/#official-guides-and-community-contributions","title":"Official guides and Community contributions","text":"<p>Here the list of guides about WordOps available in this documentation:</p> <ul> <li>Migration from EasyEngine v3</li> <li>Issue and manage ssl certificates</li> <li>WordPress sites migration</li> <li>WordOps with DigitalOcean volumes</li> <li>Enable live kernel patching on Ubuntu</li> </ul>"},{"location":"guides/#blogs-tutorials","title":"Blogs &amp; Tutorials","text":""},{"location":"guides/#english","title":"English","text":"<ul> <li>Install fast WordPress site on Ubuntu using WordOps - MARKO NTECH</li> <li>High traffic WordPress architecture using AWS Lightsail - David Vekslermkd</li> <li>Build a Super Optimized WordPress site with WordOps - Varma</li> <li>Host an incredibly fast WordPress website using WordOps on AWS Lightsail CDN</li> <li>Install WordPress Automatically on Ubuntu 20.04 using WordOps</li> </ul>"},{"location":"guides/#french","title":"French","text":"<ul> <li>WordOps - D\u00e9ployer WordPress avec Nginx simplement - Jesuisadmin</li> </ul>"},{"location":"guides/#indonesian","title":"Indonesian","text":"<ul> <li>Cara Mudah Install WordPress di Ubuntu - Musa Amin</li> </ul>"},{"location":"guides/#polish","title":"Polish","text":"<ul> <li>Instalacja WordPress na serwerze z WordOps \u2013 prosto, szybko i darmowo - Dominik Fajferek</li> </ul>"},{"location":"guides/#add-your-own-blog-post-about-wordops","title":"Add your own blog post about WordOps","text":"<p>You wrote an article about WordOps ? Feel free to use the edit button at the right top and to open a pull request to add the link of your article.</p>"},{"location":"how-to/","title":"How to ... ?","text":""},{"location":"how-to/#questions-overview","title":"Questions overview","text":"<ul> <li>How to set default language for WordPress install ?</li> <li>How to secure WordOps backend with Let's Encrypt SSL certificate ?</li> <li>How to renew Let's Encrypt Certificates ?</li> <li>How to configure Let's Encrypt DNS API validation</li> <li>How to get an A+ grade on ssllabs with Wordops ?</li> <li>How to add FTP users</li> <li>How to install HWE stacks on Ubuntu</li> <li>How to use a Remote MySQL server with WordOps</li> <li>How to automate WordPress post-install tasks</li> <li>How to allow zip &amp; gzip files download</li> <li>How to setup basic http-auth on site</li> <li>How to automate WordOps installation</li> <li>How to use micro-caching with Nginx</li> <li>How to bypass fastcgi_cache on specific URLs</li> <li>How to setup Sendmail with Sendgrid</li> <li>How to enable/disable Brotli compression with Nginx</li> </ul>"},{"location":"how-to/#other-questions","title":"Other questions","text":""},{"location":"how-to/#get-a-list-of-wordops-commands","title":"Get a list of WordOps commands","text":"<p>To get the list of WordOps commands, you can use the command:</p> <pre><code>wo\n</code></pre> <p>Then for any subcommand, you just have to add the arugment -h or --help to display command informations with examples.</p> <pre><code>wo site --help\n</code></pre>"},{"location":"how-to/#get-the-mysql-root-password","title":"Get the MySQL root password","text":"<p>MySQL root password is stored in the file <code>/etc/mysql/conf.d/my.cnf</code></p>"},{"location":"how-to/#display-mysql-user-and-password-of-a-site","title":"Display MySQL user and password of a site","text":"<p>You can use the command:</p> <pre><code>wo site info site.tld\n</code></pre>"},{"location":"how-to/#access-wordops-backend","title":"Access WordOps backend","text":"<p>WordOps backend is available on port 22222, you can access it with the server IP, hostname or with a domain pointed to the server IP:</p> <pre><code># with server IP\nhttps://YOUR.SERVER.IP:22222\n\n# with server hostname\nhttps://server.site.tld:22222\n\n# with a domain hosted on the server\nhttps://site.tld:22222\n</code></pre>"},{"location":"how-to/#change-wordops-backend-username-and-password","title":"Change WordOps backend username and password","text":"<p>You can use the command:</p> <pre><code>wo secure --auth\n</code></pre>"},{"location":"how-to/#renew-a-lets-encrypt-ssl-certificates-with-wordops","title":"Renew a Let's Encrypt SSL Certificates with WordOps","text":"<p>Previously with EasyEngine v3, Let's Encrypt certificates were renewed by running the command <code>ee site update --le=renew --all</code> with a cronjob.</p> <p>You may have noticed the command <code>site update --le=renew</code> still exist in WordOps, but you shouln't need it because WordOps use the awesome acme client acme.sh to issue and handle Let's Encrypt SSL certificates. All certificates are automatically renewed every 60 days by acme.sh using a cronjob.</p> <p>However, if you really need to renew your certificates, you can directly use acme.sh to renew all certificates with the following command:</p> <pre><code>acme.sh --renew-all --ecc\n</code></pre>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"about/changelog/","title":"Changelog","text":""},{"location":"about/changelog/#v3154-2022-10-25","title":"v3.15.4 - 2022-10-25","text":""},{"location":"about/changelog/#fixed","title":"Fixed","text":"<ul> <li>Nginx prefetch-proxy configuration</li> <li>Linux distribution variable not set properly</li> </ul>"},{"location":"about/changelog/#v3153-2022-10-24","title":"v3.15.3 - 2022-10-24","text":""},{"location":"about/changelog/#added","title":"Added","text":"<ul> <li>Support for Debian 10/11</li> </ul>"},{"location":"about/changelog/#changed","title":"Changed","text":"<ul> <li>Install redis from official repository</li> <li>Redis version bump to 7.0.5</li> <li>WP-CLI version bump to 2.7.1</li> <li>Remove outdated Nginx directives</li> <li>Updated repository GPG Key</li> <li>UFW stack detect proftpd during install</li> </ul>"},{"location":"about/changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Netdata upgrade failure on old servers</li> <li>MariaDB service disabled after upgrade with <code>wo stack migrate --mariadb</code></li> <li>Proftpd install on Ubuntu 22.04 and Debian 11</li> </ul>"},{"location":"about/changelog/#v3152-2022-09-23","title":"v3.15.2 - 2022-09-23","text":""},{"location":"about/changelog/#added_1","title":"Added","text":"<ul> <li>Add support for Chrome Privacy Preserving Prefetch Proxy Issue 440</li> </ul>"},{"location":"about/changelog/#changed_1","title":"Changed","text":"<ul> <li>Cloudflare IP script for Nginx now fetch Cloudflare IPs using the API</li> </ul>"},{"location":"about/changelog/#fixed_2","title":"Fixed","text":"<ul> <li>wo secure --auth on Ubuntu 22.04</li> </ul>"},{"location":"about/changelog/#v3151-2022-09-09","title":"v3.15.1 - 2022-09-09","text":""},{"location":"about/changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Hotfix outdated python distro package cause issues on some servers</li> </ul>"},{"location":"about/changelog/#v3150-2022-09-09","title":"v3.15.0 - 2022-09-09","text":""},{"location":"about/changelog/#added_2","title":"Added","text":"<ul> <li>Ubuntu 22.04 LTS Support</li> </ul>"},{"location":"about/changelog/#changed_2","title":"Changed","text":"<ul> <li>New Nginx package based on latest Nginx stable release 1.22.2</li> <li>Better Referrer-Policy (PR #434)</li> <li>MariaDB default version is now 10.6</li> </ul>"},{"location":"about/changelog/#fixed_4","title":"Fixed","text":"<ul> <li><code>wo log reset --all</code> (PR #438)</li> <li>Outdated Nginx directives</li> <li>Netdata stack upgrade(PR #439)</li> </ul>"},{"location":"about/changelog/#v3142-2022-04-29","title":"v3.14.2 - 2022-04-29","text":""},{"location":"about/changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Git unsafe directories issue</li> <li>WP_DEBUG variable in wp-config.php</li> </ul>"},{"location":"about/changelog/#v3141-2022-02-16","title":"v3.14.1 - 2022-02-16","text":""},{"location":"about/changelog/#fixed_6","title":"Fixed","text":"<ul> <li>Cloudflare IP range script (PR #422)</li> <li>Netdata stack installation</li> <li>Missing php upstream in WordOps backend</li> </ul>"},{"location":"about/changelog/#v3140-2022-01-26","title":"v3.14.0 - 2022-01-26","text":""},{"location":"about/changelog/#added_3","title":"Added","text":"<ul> <li>PHP 8.0 and 8.1 support (PR #413)</li> <li>Support arm64 architecture (PR #392)</li> </ul>"},{"location":"about/changelog/#changed_3","title":"Changed","text":"<ul> <li>Update WP-CLI to v2.6.0 with PHP 8.0/8.1 support</li> <li>Update adminer to v4.8.1</li> <li>Update Redis repository (PR #377)</li> <li>Set PHP 8.0 as default PHP version. Can be changed in <code>/etc/wo/wo.conf</code></li> </ul>"},{"location":"about/changelog/#fixed_7","title":"Fixed","text":"<ul> <li>WordOps install script issues</li> <li>acme.sh issues with zero-ssl CA</li> </ul>"},{"location":"about/changelog/#v3132-2020-10-27","title":"v3.13.2 - 2020-10-27","text":""},{"location":"about/changelog/#fixed_8","title":"Fixed","text":"<ul> <li>WordOps install issues on some servers</li> <li>MariaDB systemd service not fully enabled after upgrade</li> </ul>"},{"location":"about/changelog/#v3131-2020-10-26","title":"v3.13.1 - 2020-10-26","text":""},{"location":"about/changelog/#fixed_9","title":"Fixed","text":"<ul> <li>Python virtualenv configuration</li> <li>Removing ssl certificate when deleting a site</li> </ul>"},{"location":"about/changelog/#v3130-2020-10-25","title":"v3.13.0 - 2020-10-25","text":""},{"location":"about/changelog/#added_4","title":"Added","text":"<ul> <li>MariaDB 10.5 support (installed by default)</li> <li>Upgrade to MariaDB 10.5 with <code>wo stack migrate --mariadb</code></li> </ul>"},{"location":"about/changelog/#changed_4","title":"Changed","text":"<ul> <li>Improved Nginx caching rules to cache requests with query strings related to analytics (utm_, fbclid)</li> <li>WordOps is installed inside a Python virtual environment in /opt/wo to isolate it from the system's Python libraries</li> </ul>"},{"location":"about/changelog/#fixed_10","title":"Fixed","text":"<ul> <li>Useless php-cli version removal</li> <li>Redis 6.0.6 not installed on Ubuntu 20.04 LTS</li> </ul>"},{"location":"about/changelog/#v3124-2020-10-14","title":"v3.12.4 - 2020-10-14","text":""},{"location":"about/changelog/#changed_5","title":"Changed","text":"<ul> <li>Redis 6.0.6 available on Ubuntu LTS</li> </ul>"},{"location":"about/changelog/#fixed_11","title":"Fixed","text":"<ul> <li>Avif (AV1 Image Format) &amp; WebP Nginx conditional support(PR #322)</li> <li>Sendmail initial configuration with sendmailconfig</li> <li>SSL certificates export encoding with utf-8</li> <li>Nanorc install on Ubuntu 16.04 LTS</li> </ul>"},{"location":"about/changelog/#v3123-2020-10-13","title":"v3.12.3 - 2020-10-13","text":""},{"location":"about/changelog/#added_5","title":"Added","text":"<ul> <li>Add avif (AV1 Image Format) support into Nginx (PR #314)</li> </ul>"},{"location":"about/changelog/#changed_6","title":"Changed","text":"<ul> <li>Use zstd instead of pigz for archive compression</li> <li>Exclude Nginx_vts status page from traffic calculation (PR #294)</li> </ul>"},{"location":"about/changelog/#fixed_12","title":"Fixed","text":"<ul> <li>fail2ban install without Nginx</li> <li>Grant MySQL permissions on all MySQL/MariaDB variant (PR #285)</li> <li>PHP PECL extensions and PHP 8.0 issues</li> </ul>"},{"location":"about/changelog/#v3122-2020-05-15","title":"v3.12.2 - 2020-05-15","text":""},{"location":"about/changelog/#fixed_13","title":"Fixed","text":"<ul> <li>Wrong PHP upstream for WordOps backend</li> </ul>"},{"location":"about/changelog/#v3121-2020-05-14","title":"v3.12.1 - 2020-05-14","text":""},{"location":"about/changelog/#fixed_14","title":"Fixed","text":"<ul> <li>Redis repository on Ubuntu 20.04 LTS</li> </ul>"},{"location":"about/changelog/#changed_7","title":"Changed","text":"<ul> <li>MariaDB offical repository available for Ubuntu 20.04 LTS</li> </ul>"},{"location":"about/changelog/#v3120-2020-05-13","title":"v3.12.0 - 2020-05-13","text":""},{"location":"about/changelog/#added_6","title":"Added","text":"<ul> <li>Set opcache.preload_user for PHP 7.4</li> <li>Link to GitHub changelog after WordOps upgrade</li> <li>Automated PHPMyAdmin and Adminer latest release download and install</li> <li>Enable Let's Encrypt SSL on sites with http auth (PR #254)</li> <li>Ubuntu 20.04 LTS Support (experimental)</li> <li>New Nginx 1.18.0 package built with OpenSSL 1.1.1g</li> <li>Default PHP version can be set in /etc/wo/wo.conf</li> </ul>"},{"location":"about/changelog/#changed_8","title":"Changed","text":"<ul> <li>Improved caching rules (PR #265)</li> <li>Default PHP version is now 7.3</li> </ul>"},{"location":"about/changelog/#fixed_15","title":"Fixed","text":"<ul> <li>MySQL databases backup when using remote MySQL server</li> <li>PHPMyAdmin assets missing after installation</li> <li>Missing WP-CLI argument when switching site URL to https (PR #257)</li> <li>WordOps installation failure with pip</li> <li>Installation on raspberry pi 4</li> <li>Fail2ban configuration when Nginx is not installed</li> <li>Wo-kernel systemd service start failure</li> <li>missing letsencrypt settings in wo.conf</li> <li>MariaDB issue with innodb_buffer_pool_instances</li> </ul>"},{"location":"about/changelog/#v3114-2020-01-17","title":"v3.11.4 - 2020-01-17","text":""},{"location":"about/changelog/#fixed_16","title":"Fixed","text":"<ul> <li><code>wo secure --port</code> variable error</li> <li><code>--letsencrypt</code> variable error</li> </ul>"},{"location":"about/changelog/#v3113-2020-01-16","title":"v3.11.3 - 2020-01-16","text":""},{"location":"about/changelog/#added_7","title":"Added","text":"<ul> <li>Backported Nano editor package for Debian/Ubuntu/Raspbian (which support syntax highlighting with <code>--nanorc</code>)</li> <li>Protect Easy Digital Download files from being accessed directly (PR #222)</li> </ul>"},{"location":"about/changelog/#changed_9","title":"Changed","text":"<ul> <li>Improved WordOps performance by removing useless imports in <code>wo site</code> code</li> <li>Improved opcache cleaning with <code>wo clean --opcache</code></li> <li>Force php imagick extension to be enabled after php-fpm install</li> <li>Netdata upgrade is now performed with fresh install script downloaded from github</li> <li>Update phpmyadmin to v5.0.1</li> </ul>"},{"location":"about/changelog/#fixed_17","title":"Fixed","text":"<ul> <li>Domain IP validation when using CNAME before issuing SSL certificate</li> <li>Netdata stack purge/remove not working properly</li> <li>Do not backup all databases when purging <code>--mysql</code> stack with remote MySQL server</li> <li>Netdata upgrade failure due to missing arguments</li> </ul>"},{"location":"about/changelog/#v3112-2019-12-07","title":"v3.11.2 - 2019-12-07","text":""},{"location":"about/changelog/#changed_10","title":"Changed","text":"<ul> <li>Proxy virtualhost now include proxy_params with X-Forwarded-Proto header</li> <li>Acme.sh upgrade</li> </ul>"},{"location":"about/changelog/#fixed_18","title":"Fixed","text":"<ul> <li>Issue with Nginx variables_hash_bucket_size &amp; variables_hash_max_size</li> <li>Netdata MySQL user error when purging/reinstalling Netdata stack</li> <li>Fix <code>wo site cd</code></li> </ul>"},{"location":"about/changelog/#v3111-2019-12-04","title":"v3.11.1 - 2019-12-04","text":""},{"location":"about/changelog/#added_8","title":"Added","text":"<ul> <li><code>--fail2ban</code> in wo stack upgrade</li> </ul>"},{"location":"about/changelog/#fixed_19","title":"Fixed","text":"<ul> <li>error with <code>wo maintenance</code></li> <li>php-igbinary missing for php74 (run <code>wo stack upgrade</code> to install it)</li> <li>opcache reset with <code>wo clean</code></li> </ul>"},{"location":"about/changelog/#v3110-2019-12-03","title":"v3.11.0 - 2019-12-03","text":""},{"location":"about/changelog/#added_9","title":"Added","text":"<ul> <li>PHP 7.4 support</li> <li>Improved Webp images support with Cloudflare (Issue #95). Nginx will not serve webp images alternative with Cloudflare IP ranges.</li> <li>Stack upgrade for adminer</li> <li>Check acme.sh installation and setup acme.sh if needed before issuing certificate</li> <li>Add <code>--ufw</code> to <code>wo stack status</code></li> <li>Add Nginx directive <code>gzip_static on;</code> to serve precompressed assets with Cache-Enabler or WP-Rocket. (Issue #207)</li> </ul>"},{"location":"about/changelog/#changed_11","title":"Changed","text":"<ul> <li>Previous <code>--php73</code> &amp; <code>--php73=off</code> flags are replaced by <code>--php72</code>, <code>--php73</code>, <code>--php74</code> to switch site's php version</li> <li>phpMyAdmin updated to v4.9.2</li> <li>Adminer updated to v4.7.5</li> <li>Replace dot and dashes by underscores in database names (Issue #206)</li> <li>Increased database name length to 32 characters from domain name + 8 random characters</li> </ul>"},{"location":"about/changelog/#fixed_20","title":"Fixed","text":"<ul> <li>typo error in motd-news script (Issue #204)</li> <li>Install Nginx before ngxblocker</li> <li>WordOps install/update script text color</li> <li>Issue with MySQL stack on Raspbian 9/10</li> <li>Typo error  (PR #205)</li> <li>php version in <code>wo debug</code> (PR #209)</li> <li>SSL certificates expiration display with shared wildcard certificates</li> </ul>"},{"location":"about/changelog/#v3103-2019-11-11","title":"v3.10.3 - 2019-11-11","text":""},{"location":"about/changelog/#added_10","title":"Added","text":"<ul> <li>[ACME] Display warning about sudo usage when issuing certificate with DNS API validation (require <code>sudo -E</code>)</li> </ul>"},{"location":"about/changelog/#changed_12","title":"Changed","text":"<ul> <li>[ACME] Resolve domain IP over HTTPS with Cloudflare DNS Resolver</li> <li>[CORE] Cement Framework updated to v2.10.2</li> <li>[SITE] database name = 0 to 16 characters from the site name + 4 randomly generated character</li> <li>[SITE] database user = 0 to 12 characters from the site name + 4 randomy generated character</li> <li>[STACK] Improve sysctl tweak deployment</li> </ul>"},{"location":"about/changelog/#fixed_21","title":"Fixed","text":"<ul> <li>[SITE] https redirection missing on subdomains sites</li> <li>Issues with digitalocean mariadb repository</li> <li>Cement Framework output handler issues</li> <li>[CLEAN] check if Nginx is installed before purging fastcgi or opcache</li> </ul>"},{"location":"about/changelog/#v3102-2019-11-06","title":"v3.10.2 - 2019-11-06","text":""},{"location":"about/changelog/#added_11","title":"Added","text":"<ul> <li>[STACK] nanorc syntax highlighting for nano editor : <code>--nanorc</code></li> </ul>"},{"location":"about/changelog/#changed_13","title":"Changed","text":"<ul> <li><code>wo stack remove/purge</code> without argument print help instead of removing main stacks</li> </ul>"},{"location":"about/changelog/#fixed_22","title":"Fixed","text":"<ul> <li>Import rtCamp:EasyEngine GPG key to avoid issues with previous nginx repository</li> <li>Unable to issue certificate for a domain if a subdomain certificate exist</li> <li>Incorrect WP-CLI path site_url_https function</li> <li><code>wo stack upgrade --ngxblocker</code> not working properly</li> </ul>"},{"location":"about/changelog/#v3101-2019-10-30","title":"v3.10.1 - 2019-10-30","text":""},{"location":"about/changelog/#fixed_23","title":"Fixed","text":"<ul> <li>WordOps install/upgrade from PyPi</li> </ul>"},{"location":"about/changelog/#v3100-2019-10-30","title":"v3.10.0 - 2019-10-30","text":""},{"location":"about/changelog/#added_12","title":"Added","text":"<ul> <li>WordOps is now installed inside a wheel with pip (easier, cleaner and safer) from PyPi</li> <li>Redis 5.0.6 package backported to Debian 8/9/10</li> <li>Custom motd to display a message if a new WordOps release is available</li> <li>Run <code>mysql_upgrade</code> during MySQL upgrade with <code>wo stack upgrade</code> to perform migration if needed</li> <li><code>wo stack upgrade --ngxblocker</code> to update ngxblocker blocklist</li> </ul>"},{"location":"about/changelog/#changed_14","title":"Changed","text":"<ul> <li>Sysctl tweaks are applied during stack install and removed from install script</li> <li>Nginx &amp; MariaDB systemd tweaks are removed from install script and applied during stacks install/upgrade</li> <li>Initial creation of .gitconfig is displayed the first time you run the command <code>wo</code></li> <li>Added <code>/var/lib/php/sessions/</code> to open_basedir to allow php sessions storage</li> <li>WordOps now check if a repository already exist before trying to adding it again.</li> <li>Improved SSL certificate error messages by displaying domain IP and server IP</li> <li>Version check before updating WordOps with <code>wo update</code> is now directly handled by <code>wo</code></li> <li>Refactored WordOps download function with python3-requests</li> <li>MySQL backup path changed to <code>/var/lib/wo-backup/mysql</code></li> <li>Do not check anymore if stack are installed with apt in <code>wo service</code> but only if there is a systemd service</li> <li>Refactored <code>--letsencrypt=renew</code>. Require the flag <code>--force</code> if certificate expiration is more than 45 days</li> <li>Improve netdata stack upgrade with install from source detection and updater fallback</li> </ul>"},{"location":"about/changelog/#fixed_24","title":"Fixed","text":"<ul> <li>Incorrect PHP-FPM log path is <code>wo log</code></li> <li>force-ssl.conf not removed after removing a site</li> <li><code>wo clean --opcache</code> not working with invalid SSL certificate</li> <li><code>wo stack install --cheat</code> wasn't working properly previously</li> <li><code>wo info</code> failure depending on php-fpm pool name. ConfigParser will now detect the section name.</li> </ul>"},{"location":"about/changelog/#v3994-2019-10-18","title":"v3.9.9.4 -  2019-10-18","text":""},{"location":"about/changelog/#changed_15","title":"Changed","text":"<ul> <li>[STACK] New Nginx package built with libbrotli-dev for all linux distro supported by WordOps</li> </ul>"},{"location":"about/changelog/#fixed_25","title":"Fixed","text":"<ul> <li>GPG keys error with previous EasyEngine Nginx repository</li> <li>Issue with <code>--ngxblocker</code> stack removal/purge</li> <li>Install/Update issues with python3 setup.py</li> <li>WordOps deploying SSL certificate even if acme.sh failed</li> </ul>"},{"location":"about/changelog/#v3993-2019-10-15","title":"v3.9.9.3 -  2019-10-15","text":""},{"location":"about/changelog/#added_13","title":"Added","text":"<ul> <li>[STACK] Add Nginx TLS 1.3 0-RTT configuration</li> </ul>"},{"location":"about/changelog/#changed_16","title":"Changed","text":"<ul> <li>[STACK] New Nginx package built with OpenSSL_1.1.1d and the latest ngx_brotli module</li> </ul>"},{"location":"about/changelog/#fixed_26","title":"Fixed","text":"<ul> <li><code>wo stack upgrade</code> when using nginx-ee</li> <li><code>wo secure --auth</code></li> <li><code>wo secure --sshport</code> not working with default ssh config</li> <li>Issues after APT repositories informations changed</li> <li><code>www</code> was added to WordPress site url with subdomains Issue #178</li> <li>Issuing certificate with acme.sh for sub.sub-domains not working</li> </ul>"},{"location":"about/changelog/#v3992-2019-10-04","title":"v3.9.9.2 - 2019-10-04","text":""},{"location":"about/changelog/#added_14","title":"Added","text":"<ul> <li>[STACK] Nginx server_names_hash_bucket_size automated fix</li> <li>[STACK] Nginx configuration rollback in case of failure after <code>wo stack upgrade --nginx</code></li> <li>[STACK] Nginx ultimate bad bots blocker with <code>wo stack install --ngxblocker</code></li> <li>[STACK] Added support for custom Nginx compiled from source</li> <li>[STACK] Rollback configuration with Git in case of failure during service reload/restart</li> <li>[SITE] Enable or disable Nginx ultimate bad bots blocker with <code>wo site update site.tld --ngxblocker/--ngxblocker=off</code></li> </ul>"},{"location":"about/changelog/#changed_17","title":"Changed","text":"<ul> <li>[CORE] Query acme.sh database directly to check if a certificate exist</li> <li>[SITE] <code>--letsencrypt=renew</code> is deprecated because not it's not required with acme.sh</li> </ul>"},{"location":"about/changelog/#fixed_27","title":"Fixed","text":"<ul> <li>[SITE] Issues with root_domain variable with <code>wo site update</code></li> <li>[SECURE] Wrong sftp-server path in sshd_config</li> <li>[SITE] Git error when using flag <code>--vhostonly</code></li> <li>[SITE] Wrong plugin name displayed when installing Cache-Enabler</li> </ul>"},{"location":"about/changelog/#v3991-2019-09-26","title":"v3.9.9.1 - 2019-09-26","text":""},{"location":"about/changelog/#added_15","title":"Added","text":"<ul> <li>[SECURE] Allow new ssh port with UFW when running <code>wo secure --sshport</code></li> <li>[STACK] Additional Nginx directives to prevent access to log files or backup from web browser</li> <li>[CORE] apt-mirror-updater to select the fastest debian/ubuntu mirror with automatic switching between mirrors if the current mirror is being updated</li> <li>[SITE] add <code>--force</code> to force Let's Encrypt certificate issuance even if DNS check fail</li> <li>[STACK] check if another mta is installed before installing sendmail</li> <li>[SECURE] <code>--allowpassword</code> to allow password when using <code>--ssh</code> with <code>wo secure</code></li> </ul>"},{"location":"about/changelog/#changed_18","title":"Changed","text":"<ul> <li>[SECURE] Improved sshd_config template according to Mozilla Infosec guidelines</li> <li>[STACK] Always add stack configuration into Git before making changes to make rollback easier</li> <li>[STACK] Render php-fpm pools configuration from template</li> <li>[STACK] Adminer updated to v4.7.3</li> </ul>"},{"location":"about/changelog/#fixed_28","title":"Fixed","text":"<ul> <li>[STACK] UFW setup after removing all stacks with <code>wo stack purge --all</code></li> <li>[CONFIG] Invalid CORS header</li> <li>[STACK] PHP-FPM stack upgrade failure due to pool configuration</li> </ul>"},{"location":"about/changelog/#v399-2019-09-24","title":"v3.9.9 - 2019-09-24","text":""},{"location":"about/changelog/#added_16","title":"Added","text":"<ul> <li>[STACK]  UFW now available as a stack with flag <code>--ufw</code></li> <li>[SECURE] <code>wo secure --ssh</code> to harden ssh security</li> <li>[SECURE] <code>wo secure --sshport</code> to change ssh port</li> <li>[SITE] check domain DNS records before issuing a new certificate without DNS API</li> <li>[STACK] Acme challenge with DNS Alias mode <code>--dnsalias=aliasdomain.tld</code> acme.sh wiki</li> </ul>"},{"location":"about/changelog/#changed_19","title":"Changed","text":"<ul> <li>[APP] WordOps dashboard updated to v1.2, shipped as a html file, it can be used without PHP stack</li> <li>[STACK] Refactor Let's Encrypt with acme.sh</li> <li>[STACK] Log error improved with acme.sh depending on the acme challenge (DNS API or Webroot)</li> <li>[INSTALL] Removed UFW setup from install script</li> <li>[APP] phpMyAdmin updated to v4.9.1</li> <li>[STACK] Commit possible Nginx configuration changes into Git before and after performing tasks (in <code>wo secure</code> for example)</li> <li>[CORE] Update deprecated handlers and hooks registration</li> </ul>"},{"location":"about/changelog/#fixed_29","title":"Fixed","text":"<ul> <li>[STACK] <code>wo stack purge --all</code> failure if mysql isn't installed</li> <li>[INSTALL] Fix EEv3 files cleanup</li> <li>[SECURE] Incorrect variable usage in <code>wo secure --port</code></li> <li>[INSTALL] Fix backup_ee function in install script</li> </ul>"},{"location":"about/changelog/#v39812-2019-09-20","title":"v3.9.8.12 - 2019-09-20","text":""},{"location":"about/changelog/#changed_20","title":"Changed","text":"<ul> <li>[APP] WP-CLI updated to v2.3.0</li> <li>[CORE] Improved SSL certificates management from previous letsencrypt or certbot install</li> <li>[CORE] Use a separate python file for gitconfig during installation to redirect setup.py output into logs</li> <li>[CORE] updated cement to v2.8.2</li> <li>[CORE] removed old <code>--experimental flag</code></li> <li>[CORE] Improve and simplify install script</li> </ul>"},{"location":"about/changelog/#fixed_30","title":"Fixed","text":"<ul> <li>htpasswd protection when migrating from EasyEngine v3 Issue #152</li> <li>acme.sh install when migration from EasyEngine v3 Issue #153</li> </ul>"},{"location":"about/changelog/#v39811-2019-09-06","title":"v3.9.8.11 - 2019-09-06","text":""},{"location":"about/changelog/#changed_21","title":"Changed","text":"<ul> <li>Improved general logs display</li> <li>UFW configuration is only applied during initial installation if UFW is disabled</li> </ul>"},{"location":"about/changelog/#fixed_31","title":"Fixed","text":"<ul> <li>Redis-server configuration and start</li> <li>Nginx upgrade with <code>wo stack upgrade</code></li> </ul>"},{"location":"about/changelog/#v39810-2019-09-04","title":"v3.9.8.10 - 2019-09-04","text":""},{"location":"about/changelog/#changed_22","title":"Changed","text":"<ul> <li>Improve Let's Encrypt certificate issuance logging informations</li> <li>MariaDB configuration &amp; optimization is now rendered from a template (can be protected against overwriting with .custom)</li> </ul>"},{"location":"about/changelog/#fixed_32","title":"Fixed","text":"<ul> <li>Fix cheat.sh install PR #139</li> <li>sslutils error when trying to display SSL certificate expiration</li> <li>Fix cheat.sh symbolic link check before creation</li> <li>subdomain detection with complex suffixes like com.br</li> <li>Fix mariadb install/upgrade when running mariadb-10.1</li> <li>Fix mariadb install/upgrade on raspbian and debian 8</li> <li>Fix mariadb tuning wrong pool_instance calculation</li> </ul>"},{"location":"about/changelog/#v3989-2019-09-03","title":"v3.9.8.9 - 2019-09-03","text":""},{"location":"about/changelog/#added_17","title":"Added","text":"<ul> <li>Rate limiter on wp-cron.php and xmlrpc.php</li> <li>mime.types template to handle missing extension ttf</li> <li>try_files directive for favicon</li> <li>additional settings for fail2ban</li> <li>asynchronous installer to decrease install/update duration</li> </ul>"},{"location":"about/changelog/#fixed_33","title":"Fixed","text":"<ul> <li>Several typo or syntax errors</li> <li><code>wo  site</code> errors due to broken symlinks for access.log or error.log</li> <li><code>wo clean</code> error due to unused memcached flag</li> <li>MySQL database and user variables overwrited in <code>wo site</code></li> </ul>"},{"location":"about/changelog/#v3988-2019-09-02","title":"v3.9.8.8 - 2019-09-02","text":""},{"location":"about/changelog/#added_18","title":"Added","text":"<ul> <li>Sendmail stack to send WordPress welcome email properly</li> <li>Backup all MySQL databases before removing/purging MySQL stack</li> </ul>"},{"location":"about/changelog/#changed_23","title":"Changed","text":"<ul> <li>do not terminate stack install process on errors</li> <li>WordOps internal log rotation limit increased to 1MB</li> </ul>"},{"location":"about/changelog/#fixed_34","title":"Fixed","text":"<ul> <li>ufw rules for proftpd not applied</li> <li>phpredisadmin install</li> <li>netdata configuration</li> <li>extplorer installation</li> <li>add LANG='en_US.UTF-8' in install script</li> <li>Read public_suffix list with utf8 encoding. Issue #128</li> <li>Netdata uninstall script path. PR #135</li> <li>SSL Certificates expiration for subdomains</li> </ul>"},{"location":"about/changelog/#v3987-2019-08-31","title":"v3.9.8.7 - 2019-08-31","text":""},{"location":"about/changelog/#changed_24","title":"Changed","text":"<ul> <li>WordPress default permalinks structure from <code>/%year%/%monthnum%/%day%/%postname%/</code> -&gt; <code>/%postname%/</code></li> </ul>"},{"location":"about/changelog/#fixed_35","title":"Fixed","text":"<ul> <li>Error with <code>wo stack upgrade --nginx</code></li> <li>Install/update script version check</li> <li>clamAV stack install</li> </ul>"},{"location":"about/changelog/#v3986-2019-08-30","title":"v3.9.8.6 - 2019-08-30","text":""},{"location":"about/changelog/#added_19","title":"Added","text":"<ul> <li>Subdomains are automatically secured with an existant Wildcard LetsEncrypt SSL certificate. (If a wildcard certificate exist, WordOps will use this certificate for subdomains instead of issuing new certificates)</li> <li>MySQL &amp; Redis stack to <code>wo stack remove/purge</code></li> <li>Dump MySQL databases before purging MySQL Stack</li> </ul>"},{"location":"about/changelog/#changed_25","title":"Changed","text":"<ul> <li>Date format in backup name : /backup/30Aug2019035932 -&gt; /backup/30Aug2019-03-59-32</li> <li>Cleanup and update bash_completion</li> </ul>"},{"location":"about/changelog/#fixed_36","title":"Fixed","text":"<ul> <li>cache-enabler plugin not installed and configured with <code>wo site update site.tld --wpce</code></li> <li>possible issue with domain variable in <code>--letsencrypt=wildcard</code></li> <li>python3-mysqldb not available on Debian 8 (Jessie)</li> <li>Fix mysql variable skip-name-resolved</li> </ul>"},{"location":"about/changelog/#v3985-2019-08-30","title":"v3.9.8.5 - 2019-08-30","text":""},{"location":"about/changelog/#changed_26","title":"Changed","text":"<ul> <li>updated OpCache Control Panel to v0.2.0</li> </ul>"},{"location":"about/changelog/#fixed_37","title":"Fixed","text":"<ul> <li>Fix Netdata install on Raspbian 9/10</li> <li><code>wo stack remove/purge</code> confirmation</li> <li>Nginx error after removing a SSL certificate used to secure WordOps backend</li> <li><code>wo stack install --all</code></li> <li>ProFTPd fail2ban rules set twice if removed and reinstalled</li> <li><code>wo site update</code></li> </ul>"},{"location":"about/changelog/#v3984-2019-08-28","title":"v3.9.8.4 - 2019-08-28","text":""},{"location":"about/changelog/#added_20","title":"Added","text":"<ul> <li>cht.sh stack: linux online cheatsheet. Usage: <code>cheat &lt;command&gt;</code>. Example for tar: <code>cheat tar</code></li> <li>ClamAV anti-virus with weekly cronjob to update signatures database</li> <li>Internal function to add daily cronjobs</li> <li>Additional comment to detect previous configuration tuning (MariaDB &amp; Redis)</li> <li>Domain/Subdomain detection based on public domain suffixes list for letsencrypt</li> <li>Increase Nginx &amp; MariaDB systemd open_files limits</li> <li>Cronjob to update Cloudflare IPs list</li> <li>mariadb-backup to perform full and non-blocking databases backup (installation only. Backup feature will be available soon)</li> <li>Nginx configuration check before performing start/reload/restart (If configuration check fail, WordOps will not reload/restart Nginx anymore)</li> <li>Nginx mapping to proxy web-socket connections</li> </ul>"},{"location":"about/changelog/#changed_27","title":"Changed","text":"<ul> <li>eXplorer filemanager isn't installed with WordOps dashboard anymore, and a flag <code>--extplorer</code> is available. But it's still installed when running the command <code>wo stack install</code></li> <li>Template rendering function now check for a .custom file before overwriting a configuration by default.</li> <li>flag <code>--letsencrypt=subdomain</code> is not required anymore, you can use <code>--letsencrypt</code> or <code>-le</code></li> <li>Simplifiy and decrease duration of <code>apt-key</code> GPG keys import</li> </ul>"},{"location":"about/changelog/#fixed_38","title":"Fixed","text":"<ul> <li>typo error in <code>wo site update</code>: PR #126</li> </ul>"},{"location":"about/changelog/#v3983-2019-08-22","title":"v3.9.8.3 - 2019-08-22","text":""},{"location":"about/changelog/#changed_28","title":"Changed","text":"<ul> <li>Nginx package OpenSSL configuration improvements (TLS v1.3 now available on all operating systems supported by WordOps)</li> <li>remove user prompt for confirmation with <code>wo update</code></li> <li>Nginx stack will not be upgraded with <code>wo update</code> anymore. This can be done at anytime with <code>wo upgrade --nginx</code></li> <li>Databases name and user are now semi-randomly generated (0-8 letters from the domain + 8 random caracters)</li> </ul>"},{"location":"about/changelog/#fixed_39","title":"Fixed","text":"<ul> <li><code>wo upgrade</code> output</li> <li>Database name or database user length</li> </ul>"},{"location":"about/changelog/#v3982-2019-08-20","title":"v3.9.8.2 - 2019-08-20","text":""},{"location":"about/changelog/#added_21","title":"Added","text":"<ul> <li>Additional cache expection for Easy Digital Downloads PR #120</li> <li>Additional settings to support mobile with WP-Rocket</li> <li>Add the ability to block nginx configuration overwriting by adding a file .custom. Example with /etc/nginx/conf.d/webp.conf -&gt; <code>touch /etc/nginx/conf.d/webp.conf.custom</code></li> <li>If there is a custom file, WordOps will write the configuration in a file named fileconf.conf.orig to let users implement possible changes</li> <li>UFW minimal configuration during install. Can be disabled with the flag <code>-w</code>, <code>--wufw</code> or <code>--without-ufw</code>. Example: <code>wget -qO wo wops.cc &amp;&amp; sudo bash wo -w</code></li> </ul>"},{"location":"about/changelog/#fixed_40","title":"Fixed","text":"<ul> <li>WordOps internal database creation on servers running with custom setup</li> </ul>"},{"location":"about/changelog/#v3981-2019-08-18","title":"v3.9.8.1 - 2019-08-18","text":""},{"location":"about/changelog/#added_22","title":"Added","text":"<ul> <li>WordOps backend is automatically secured by the first Let's Encrypt SSL certificate issued</li> </ul>"},{"location":"about/changelog/#changed_29","title":"Changed","text":"<ul> <li>Extra Nginx directives moved from nginx.conf to conf.d/tweaks.conf</li> </ul>"},{"location":"about/changelog/#fixed_41","title":"Fixed","text":"<ul> <li>MySQLTuner installation</li> <li><code>wo stack remove/purge --all</code></li> <li>variable substitution in install script</li> <li><code>wo stack upgrade --phpmyadmin/--dashboard</code></li> <li>phpmyadmin blowfish_secret key length</li> <li>Cement App not exiting on close in case of error</li> </ul>"},{"location":"about/changelog/#v398-2019-08-16","title":"v3.9.8 - 2019-08-16","text":""},{"location":"about/changelog/#added_23","title":"Added","text":"<ul> <li>Allow web browser caching for json and webmanifest files</li> <li>nginx-core.mustache template used to render nginx.conf during stack setup</li> <li>APT Packages configuration step with <code>wo stack upgrade</code> to apply new configurations</li> <li>Cloudflare restore real_ip configuration</li> <li>WP-Rocket plugin support with the flag <code>--wprocket</code></li> <li>Cache-Enabler plugin support with the flag <code>--wpce</code></li> <li>Install unattended-upgrade and enable automated security updates</li> <li>Enable time synchronization with ntp</li> <li>Additional cache exception for woocommerce</li> </ul>"},{"location":"about/changelog/#changed_30","title":"Changed","text":"<ul> <li>Do not force Nginx upgrade if a custom Nginx package compiled with nginx-ee is detected</li> <li>Gzip enabled again by default with configuration in /etc/nginx/conf.d/gzip.conf</li> <li>Brotli configuration moved in /etc/nginx/conf.d/brotli.conf.disabled (disabled by default)</li> <li>Moving package configuration in a new plugin stack_pref.py</li> <li>Cleanup templates by removing all doublons (with/without php7) and replacing them with variables</li> <li>Updated Nginx to v1.16.1 in response to HTTP/2 vulnerabilites discovered</li> <li>Disable temporary adding swap feature (not working)</li> <li><code>wo stack upgrade --nginx</code> is now able to apply new configurations during <code>wo update</code>, it highly reduce upgrade duration</li> </ul>"},{"location":"about/changelog/#fixed_42","title":"Fixed","text":"<ul> <li>Error in HSTS header syntax</li> </ul>"},{"location":"about/changelog/#v3972-2019-08-12","title":"v3.9.7.2 - 2019-08-12","text":""},{"location":"about/changelog/#fixed_43","title":"Fixed","text":"<ul> <li>redis.conf permissions additional fix</li> </ul>"},{"location":"about/changelog/#v3971-2019-08-09","title":"v3.9.7.1 - 2019-08-09","text":"<ul> <li>APT Packages configuration step with <code>wo stack upgrade</code> to apply new configurations</li> <li>Cloudflare restore real_ip configuration</li> </ul>"},{"location":"about/changelog/#changed_31","title":"Changed","text":"<ul> <li>Moving package configuration in a new plugin stack_pref.py</li> <li>Set WordOps backend password length from 16 to 24</li> <li>Upgrade framework cement to 2.6.0</li> <li>Upgrade PyMySQL to 0.9.3</li> <li>Upgrade Psutil to 5.6.3</li> </ul>"},{"location":"about/changelog/#fixed_44","title":"Fixed","text":"<ul> <li>Missing import in <code>wo sync</code></li> <li>redis.conf incorrect permissions</li> </ul>"},{"location":"about/changelog/#v397-2019-08-02","title":"v3.9.7 - 2019-08-02","text":""},{"location":"about/changelog/#added_24","title":"Added","text":"<ul> <li>MySQL configuration tuning</li> <li>Cronjob to optimize MySQL databases weekly</li> <li>WO-kernel systemd service to automatically apply kernel tweaks on server startup</li> <li>Proftpd stack now secured with TLS</li> <li>New Nginx package built with Brotli from operating system libraries</li> <li>Brotli configuration with only well compressible MIME types</li> <li>WordPress site url automatically updated to <code>https://domain.tld</code> when using <code>-le/--letsencrypt</code> flag</li> <li>More informations during certificate issuance about validation mode selected</li> <li><code>--php72</code> as alternative for <code>--php</code></li> <li>Automated removal of the deprecated variable <code>ssl on;</code> in previous Nginx ssl.conf</li> <li>Project Contributing guidelines</li> <li>Project Code of conduct</li> </ul>"},{"location":"about/changelog/#changed_32","title":"Changed","text":"<ul> <li><code>wo maintenance</code> refactored</li> <li>Improved debug log</li> <li>Updated Nginx configuration process to not overwrite files with custom data (htpasswd-wo, acl.conf etc..)</li> <li>Adminer updated to v4.7.2</li> <li>eXtplorer updated to v2.1.13</li> <li>Removed WordOps version from the Nginx header X-Powered-By to avoid possible security issues</li> <li>Several code quality improvements to speed up WordOps execution</li> <li>Few adjustements on PHP-FPM configuration (max_input_time,opcache.consistency_checks)</li> <li>Added /dev/urandom &amp; /dev/shm to open_basedir in PHP-FPM configuration</li> </ul>"},{"location":"about/changelog/#fixed_45","title":"Fixed","text":"<ul> <li>Kernel tweaks were not applied without server reboot</li> <li>Fail2ban standalone install</li> <li><code>wo stack purge --all</code> error due to PHP7.3 check</li> <li>Nginx helper configuration during plugin install for Nginx fastcgi_cache and redis-cache</li> <li>phpRedisAdmin stack installation</li> <li>Fixed Travis CI build on pull requests</li> <li>Nginx <code>server_names_hash_bucket_size</code> variable error after WordOps upgrade</li> </ul>"},{"location":"about/changelog/#v3962-2019-07-24","title":"v3.9.6.2 - 2019-07-24","text":""},{"location":"about/changelog/#changed_33","title":"Changed","text":"<ul> <li>Improve <code>wo update</code> process duration</li> <li>Improve package install/upgrade/remove process</li> </ul>"},{"location":"about/changelog/#fixed_46","title":"Fixed","text":"<ul> <li>phpMyAdmin archive download link archive</li> <li>Arguments <code>--letsencrypt=clean/purge</code></li> <li>Incorrect directory removal during stack upgrade</li> </ul>"},{"location":"about/changelog/#v3961-2019-07-23","title":"v3.9.6.1 - 2019-07-23","text":""},{"location":"about/changelog/#fixed_47","title":"Fixed","text":"<ul> <li>Typo in  <code>--letsencrypt=subdomain</code></li> <li>phpMyAdmin upgrade archive extraction</li> <li>Error in the command <code>wo update</code>. Please <code>wo update --beta</code> as workaround</li> </ul>"},{"location":"about/changelog/#v396-2019-07-20","title":"v3.9.6 - 2019-07-20","text":""},{"location":"about/changelog/#added_25","title":"Added","text":"<ul> <li>New Nginx package on Ubuntu with Cloudflare HTTP/2 HPACK and Dynamic TLS records</li> <li>phpMyAdmin upgrade with <code>wo stack upgrade --phpmyadmin</code></li> <li>Wildcard SSL Certificates support with DNS validation</li> <li>Let's Encrypt DNS API support (Cloudflare, DigitalOcean, etc ..) on domain, subdomain, and wildcard</li> <li>Flag <code>--letsencrypt=clean</code> to purge a previous SSL configuration</li> <li>Support for Debian 10 buster (testing - not ready for production)</li> <li>Fail2ban with custom jails to secure WordPress &amp; SSH</li> <li>Variable <code>keylength</code> in /etc/wo/wo.conf to define letsencrypt certificate keylenght</li> <li>ProFTPd stack with UFW &amp; Fail2ban configurationz</li> <li>Beta branch and command <code>wo update --beta</code> for beta releases</li> <li>Extra directives in wp-config.php (limit posts revisions, set max_memory, enable auto-update for minor-releases)</li> </ul>"},{"location":"about/changelog/#fixed_48","title":"Fixed","text":"<ul> <li>Nginx was not reloaded after enabling HSTS</li> <li>Netdata, Composer &amp; Fail2Ban stack remove and purge</li> <li>WordPress not installed by <code>wo site update</code> with basic php73 sites</li> </ul>"},{"location":"about/changelog/#v3954-2019-07-13","title":"v3.9.5.4 - 2019-07-13","text":""},{"location":"about/changelog/#added_26","title":"Added","text":"<ul> <li>New Nginx package on Ubuntu with TLS v1.3 support (OpenSSL 1.1.1c)</li> <li>Netdata upgrade with <code>wo stack upgrade --netdata</code></li> <li>Netdata stack remove/purge</li> </ul>"},{"location":"about/changelog/#changed_34","title":"Changed","text":"<ul> <li>phpRedisAdmin is now installed with the stack <code>--admin</code></li> <li>Remove memcached - not required anymore</li> </ul>"},{"location":"about/changelog/#fixed_49","title":"Fixed","text":"<ul> <li>phpRedisAdmin installation</li> <li>Duplicated locations /robots.txt after upgrade to v3.9.5.3</li> <li>Let's Encrypt stack <code>wo site update --letsencrypt/--letsencrypt=off</code></li> <li>pt-query-advisor dead link</li> <li>Netdata persistant configuration</li> </ul>"},{"location":"about/changelog/#v3953-2019-06-18","title":"v3.9.5.3 - 2019-06-18","text":""},{"location":"about/changelog/#added_27","title":"Added","text":"<ul> <li>Argument <code>--preserve</code> with the command <code>wo update</code> to keep current Nginx configuration</li> </ul>"},{"location":"about/changelog/#fixed_50","title":"Fixed","text":"<ul> <li>Nginx upgrade failure when running wo update</li> </ul>"},{"location":"about/changelog/#v3952-2019-06-17","title":"v3.9.5.2 - 2019-06-17","text":""},{"location":"about/changelog/#added_28","title":"Added","text":"<ul> <li>Non-interactive install/upgrade</li> <li>Argument <code>--force</code> with the command <code>wo update</code></li> <li>Argument <code>-s|--silent</code> to perform non interactive installation</li> </ul>"},{"location":"about/changelog/#changed_35","title":"Changed","text":"<ul> <li>robots.txt location block moved from locations-wo.conf to wpcommon(-php7).php</li> </ul>"},{"location":"about/changelog/#fixed_51","title":"Fixed","text":"<ul> <li>WP_CACHE_KEY_SALT set twice with wpredis</li> <li>WordOps version check when using <code>wo update</code></li> <li>robots.txt file download if not created</li> <li>PHP-FPM socket path in stub_status.conf: PR #82</li> </ul>"},{"location":"about/changelog/#v3951-2019-05-10","title":"v3.9.5.1 - 2019-05-10","text":""},{"location":"about/changelog/#fixed_52","title":"Fixed","text":"<ul> <li>Adminer download link</li> </ul>"},{"location":"about/changelog/#v395-2019-05-02","title":"v3.9.5 - 2019-05-02","text":""},{"location":"about/changelog/#added_29","title":"Added","text":"<ul> <li>IPv6 support with HTTPS</li> <li>Brotli support in Nginx</li> <li>Let's Encrypt support with --proxy</li> <li>Install script handle migration from EEv3</li> <li>load-balancing on unix socket for php-fpm</li> <li>stub_status vhost for metrics</li> <li><code>--letsencrypt=subdomain</code> option</li> <li>opcache optimization for php-fpm</li> <li>EasyEngine configuration backup before migration</li> <li>EasyEngine configuration cleanup after migration</li> <li>WordOps configuration backup before upgrade</li> <li>Previous acme.sh certs migration</li> <li>\"wo maintenance\" command to perform server package update &amp; cleanup</li> <li>Support for Netdata on backend: https://server.hostname:22222/netdata/</li> <li>New Stacks: composer and netdata</li> <li>additional argument for letsencrypt: --hsts</li> <li>Clean Theme for adminer</li> <li>Credits for tools shipped with WordOps</li> <li>Cache exception for Easy Digital Download</li> <li>Additional cache exceptions for Woocommerce</li> <li>MySQL monitoring with Netdata</li> <li>WordOps-dashboard on 22222, can be installed with <code>wo stack install</code></li> <li>Extplorer filemanager in WordOps backend</li> <li>Enable OSCP Stapling with Let's Encrypt</li> <li>Compress database backup with pigz (faster than gzip) before updating sites</li> <li>Support for Ubuntu 19.04 (disco) - few php extensions missing</li> <li>Support for Raspbian 9 (stretch) - tested on Raspberry Pi 3b+</li> <li>backup letsencrypt certificate before upgrade</li> <li>directives emergency_restart_threshold &amp; emergency_restart_interval to restart php-fpm in case of failure</li> <li>EasyEngine cronjob removal during install</li> <li>Kernel tweaks via systctl.conf</li> <li>open_basedir on php-fpm process to forbid access with php outside of /var/www &amp; /run/nginx-cache</li> </ul>"},{"location":"about/changelog/#changed_36","title":"Changed","text":"<ul> <li>letsencrypt stack refactored with acme.sh</li> <li>letsencrypt validation with webroot folder</li> <li>hardened nginx ssl_ecdh_curve</li> <li>Update phpredisadmin</li> <li>Increase MySQL root password size to 24 characters</li> <li>Increase MySQL users password size to 24 characters</li> <li>Nginx locations template is the same for php7.2 &amp; 7.3</li> <li>backend SSL configuration now stored in /var/www/22222/conf/nginx/ssl.conf</li> <li>Install Netdata with static pre-built binaries instead of having to compile it from source</li> <li>Nginx updated to new stable release (1.16.0)</li> <li>New packages (phpmyadmin, adminer, composer) are not download in /tmp anymore</li> </ul>"},{"location":"about/changelog/#fixed_53","title":"Fixed","text":"<ul> <li>PHP 7.3 extras when php 7.2 isn't installed</li> <li>acme.sh installation</li> <li>acme.sh alias with config home variable</li> <li>deb.sury.org repository gpg key</li> <li>Nginx upgrade from previous WordOps release</li> <li>Force new Nginx templates during update</li> <li>Error message about missing my.cnf file during upgrade</li> <li>PHP 7.2 &amp; PHP 7.3 pool configuration during upgrade</li> <li>WordOps backup directory creation before upgrade</li> <li>EasyEngine database sync during migration</li> <li>fix command \"wo info\"</li> <li>phpmyadmin install with composer</li> <li>command \"wo clean --memcached\"</li> <li>phpredisadmin setup</li> <li>--hsts flag with basic html site</li> <li>hsts flag on site not secure with letsencrypt</li> <li>fix import of previous acme.sh certificate</li> <li>fix proxy webroot folder creation</li> </ul>"},{"location":"about/changelog/#v394-2019-03-15","title":"v3.9.4 - 2019-03-15","text":""},{"location":"about/changelog/#added_30","title":"Added","text":"<ul> <li>Nginx module nginx_vts</li> <li>Migration script from nginx-ee to nginx-wo</li> <li>Support for Debian 9 (testing)</li> <li>New Nginx build v1.14.2</li> </ul>"},{"location":"about/changelog/#changed_37","title":"Changed","text":"<ul> <li>Update WP-CLI version to 2.1.0</li> <li>Update Adminer to 4.6.2</li> <li>Update predis to v1.1.1</li> <li>Refactored nginx.conf</li> <li>Removed HHVM Stack</li> <li>Removed old linux distro checks</li> <li>Replace wo-acme-sh by acme.sh</li> </ul>"},{"location":"about/changelog/#fixed_54","title":"Fixed","text":"<ul> <li>Outdated Nginx ssl_ciphers suite</li> <li>Debian 9 nginx build</li> </ul>"},{"location":"about/changelog/#v393-2019-03-07","title":"v3.9.3 - 2019-03-07","text":""},{"location":"about/changelog/#changed_38","title":"Changed","text":"<ul> <li>Updated Nginx fastcgi_cache templates</li> <li>Updated Nginx redis_cache templates</li> <li>Updated Nginx wp-super-cache templates</li> <li>Updated Nginx configuration for WordPress 5.0</li> <li>remove --experimental args</li> <li>MariaDB version bumped to 10.3</li> <li>Refactored Changelog</li> <li>Updated WO manual</li> <li>Updated WO bash_completion</li> <li>Refactored README.md</li> </ul>"},{"location":"about/changelog/#added_31","title":"Added","text":"<ul> <li>Add WebP image support with Nginx mapping</li> <li>Add PHP 7.3 support</li> <li>WordPress $skip_cache variable mapping</li> </ul>"},{"location":"about/changelog/#fixed_55","title":"Fixed","text":"<ul> <li>Nginx variable $webp_suffix on fresh install (#21)</li> <li>wo update command (#7)</li> <li>Fix php services management (#12)</li> <li>Fix WP-CLI install</li> </ul>"},{"location":"about/changelog/#v392-2018-11-30","title":"v3.9.2 - 2018-11-30","text":""},{"location":"about/changelog/#changed_39","title":"Changed","text":"<ul> <li>Re-branded the fork to WordOps</li> <li>Codebase cleanup</li> <li>Set PHP 7.2 as the default</li> <li>Included support for newer OS releases</li> <li>Reworked the HTTPS configuration</li> <li>Added more automated testing with Redis</li> <li>Replaced Postfix with smtp-cli</li> <li>Dropped mail services</li> <li>Dropped w3tc support</li> </ul>"},{"location":"about/code-of-conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"about/code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"about/code-of-conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"about/code-of-conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"about/code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"about/code-of-conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team lead at contact@wordops.io. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"about/code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p>"},{"location":"about/contributing/","title":"Contributing","text":"<p>Thank you for considering contributing to WordOps.</p> <p>We love to receive contributions. Maintaining a CLI tool for deploying WordPress with Nginx with a few key strokes require to have enough knowledge for each stack configuration and to work with non-interactive operations. We rely on community contributions and user feedback to continue providing the best CLI tool to deploy WordPress with Nginx, PHP-FPM, MariaDB and Redis.</p> <p>There are many ways to contribute, with varying requirements of skills, explained in detail in the following sections.</p>"},{"location":"about/contributing/#all-wordops-users","title":"All WordOps Users","text":""},{"location":"about/contributing/#give-wordops-a-github-star","title":"Give WordOps a GitHub star","text":"<p>This is the minimum open-source users should contribute back to the projects they use. Github stars help the project gain visibility, stand out. So, if you use WordOps, consider pressing that button. It really matters.</p>"},{"location":"about/contributing/#spread-the-word","title":"Spread the word","text":"<p>Community growth allows the project to attract new talent willing to contribute. This talent is then developing new features and improves the project. These new features and improvements attract more users and so on. It is a loop. So, post about WordOps, add a review or suggest it as an alternative to another app on alternativeto.net, present it to local meetups you attend, let your online social network or twitter, facebook, reddit, etc. know you are using it. The more people involved, the faster the project evolves.</p>"},{"location":"about/contributing/#provide-feedback","title":"Provide feedback","text":"<p>Is there anything that bothers you about WordOps? Did you experience an issue while installing it or using it? Would you like to see it evolve to you need? Let us know. Open a github issue to discuss it or open a thread on our Community Forum. Feedback is very important for open-source projects. We can't commit we will do everything, but your feedback influences our road-map significantly.</p>"},{"location":"about/contributing/#experienced-users","title":"Experienced Users","text":""},{"location":"about/contributing/#help-other-users","title":"Help other users","text":"<p>As the project grows, an increasing share of our time is spent on supporting this community of users in terms of answering questions, of helping users understand how WordOps works and find their way with it. Helping other users is crucial. It allows the developers and maintainers of the project to focus on improving it.</p>"},{"location":"about/contributing/#improve-documentation","title":"Improve documentation","text":"<p>All of our documentation is in markdown (.md) files inside the WordOps Documentation GitHub project. All of our HTML documentation is generated from these files. At the top right of each documentation page you will see a pencil, that leads you directly to the markdown file that was used to generated it. Don't be afraid to click it and edit any of these documents and submit a GitHub Pull Request with your corrections/additions.</p>"},{"location":"about/contributing/#developers","title":"Developers","text":""},{"location":"about/contributing/#languages-and-libraries","title":"Languages and Libraries","text":"<p>WordOps is built with the CLI Framework Cement, with the release v2.8.0 currently.</p>"},{"location":"about/contributing/#python-version","title":"Python Version","text":"<p>WordOps source code is fully developed in python 3.x version.</p>"},{"location":"about/contributing/#coding-format","title":"Coding Format","text":"<p>We are following PEP8 style guide for coding WordOps.</p>"},{"location":"about/contributing/#libraries","title":"Libraries","text":"<p>Here is the List of Libraries we used for WordOps</p> <ul> <li>pystache</li> <li>python-apt</li> <li>pynginxconfig</li> <li>PyMySQL</li> <li>psutil</li> <li>sh</li> <li>SQLAlchemy</li> <li>requests</li> <li>distro</li> </ul>"},{"location":"about/contributing/#structure","title":"Structure","text":"<p>WordOps application can be found in the <code>wo</code> directory of the github repository Here the structure of WordOps with additional comments</p> <pre><code>wo\n\u251c\u2500\u2500 cli # the main directory of the application\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bootstrap.py # Cement framework\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 controllers # Cement framework\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ext # Cement framework\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py # Cement framework\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 plugins # WordOps commands (stack, site, update .. etc)\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 templates # WordOps configuration template\n\u251c\u2500\u2500 core # main functions used in WordOps plugins\n\u2514\u2500\u2500 utils # testing helper\n</code></pre> <p>Plugins Directory: Here the list of plugins with the related command or a short description</p> <pre><code>\u251c\u2500\u2500 plugins\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 clean.py # wo clean\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 debug.py # wo debug\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 import_slow_log.py # wo import-slow-log (from EE v3)\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 info.py # wo info\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 log.py # wo log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 maintenance.py # wo maintenance\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 models.py # site information structure for WO internal DB\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 secure.py # wo secure\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 site.py # wo site\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 site_functions.py # functions used by site.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 sitedb.py # WO internal SQlite3 database functions\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 stack.py # wo stack install/remove/purge\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 stack_migrate.py # wo stack migrate\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 stack_pref.py # stack configuration used by stack.py &amp; stack_upgrade.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 stack_services.py # wo stack start/stop/restart/reload\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 stack_upgrade.py # wo stack upgrade\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 sync.py # wo sync\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 update.py # wo update\n</code></pre>"},{"location":"about/contributing/#development-environnment","title":"Development Environnment","text":""},{"location":"about/contributing/#contributions-ground-rules","title":"Contributions Ground Rules","text":""},{"location":"about/contributing/#code-of-conduct-and-cla","title":"Code of Conduct and CLA","text":"<p>We expect all contributors to abide by the Contributor Covenant Code of Conduct.</p>"},{"location":"about/from-easyengine-to-wordops/","title":"From EasyEngine to WordOps","text":"<p>WordOps was forked from EasyEngine v3, with the objective of providing an up-to-date version of EasyEngine v3, stable and ready for production. It also include several features missing in EEv3 but we want to keep WordOps as stable as possible and that's why we are not going to add new features in each new release.</p>"},{"location":"about/from-easyengine-to-wordops/#fundamental-changes","title":"Fundamental changes","text":"<ul> <li>We've deprecated the mail stack. As an alternative, you can take a look at Mail-in-a-Box, iRedMail or Caesonia. As Roundcube alternative, there is Rainloop or Afterlogic WebMail</li> <li>Support for W3TC is dropped as a security precaution.</li> <li>PHP 5.6 and 7.0 has been replaced by PHP 7.2 and PHP 7.3.</li> <li>Nginx-ee package has been replaced by Nginx-wo (based on Nginx stable v1.16.1 with Brotli support)</li> <li>HHVM stack has been removed</li> <li>Memcached stack has been removed</li> <li>Let's Encrypt stack isn't based on letsencrypt-auto anymore, we use acme.sh to handle SSL certificates</li> </ul> <p>If you are going to migrate from EasyEngine v3, here is some important information:</p> <ul> <li>Previous PHP upstreams in Nginx will not be overwritted</li> <li>PHP 5.6 and PHP 7.0 will not be removed or uninstalled</li> <li>Previous Nginx common configurations will not be overwritted</li> </ul>"},{"location":"about/give-wordops-github-star/","title":"Give WordOps a Github star","text":"<p>Github stars are very important to give more visibility to WordOps, and attract people with skills willing to contribute to it. It's also a source of motivation for us, because that mean people found our work useful.</p> <p>WordOps stable was released only few month ago, but we added several new features since the first release as well as many improvements and bugfixes. To keep this fast release cycle, we will need more users, more suggestions, more bug reports and more contributions.</p> <p>So give WordOps a Github star, by following the link at the top right of this site, if you enjoyed using WordOps.</p>"},{"location":"about/redistributed/","title":"Redistributed Software","text":"<p>WordOps redistribute the following third-party software:</p> <p>-</p>"},{"location":"about/what-is-wordops/","title":"What is WordOps ?","text":"<p>WordOps is a command-line server control panel. It's a lightweight solution to deploy an highly optimized LNMP stack.</p>"},{"location":"commands/clean/","title":"clean","text":"<p>Clean NGINX FastCGI cache, Opcache, Redis Cache</p> <p>Usage:</p> <pre><code>wo clean [options]\n</code></pre> <p>If options are empty, default is <code>--fastcgi</code>.</p> optional arguments description <code>--fastcgi</code> clean Nginx fastcgi_cache <code>--redis</code> clean Redis cache <code>--opcache</code> clean opcache <code>--all</code> clean all cache"},{"location":"commands/debug/","title":"debug","text":"<p>Used for server level debugging</p> <p>Usage:</p> <pre><code>wo debug [options]\n</code></pre>"},{"location":"commands/info/","title":"info","text":"<p>Display configuration information related to Nginx, PHP and MySQL</p> <p></p> <p>Usage:</p> <pre><code>wo info [options]\n</code></pre> <p>Without any option, <code>wo info</code> will display all informations.</p> optional arguments description <code>--nginx</code> Get Nginx configuration information <code>--php</code> Get All PHP versions configuration information <code>--php74</code> Get PHP 7.4 configuration information <code>--php80</code> Get PHP 8.0 configuration information <code>--php81</code> Get PHP 8.1 configuration information <code>--php82</code> Get PHP 8.2 configuration information <code>--php83</code> Get PHP 8.3 configuration information <code>--mysql</code> Get MySQL configuration information"},{"location":"commands/log/","title":"log","text":"<p>Perform operations on Nginx, PHP and MySQL log files</p> <p>Usage:</p> <pre><code>wo log [&lt;site_name&gt;] [options]\n</code></pre> subcommand description gzip GZip Nginx, PHP, MySQL log file mail Mail Nginx, PHP, MySQL log file show Show Nginx, PHP, MySQL log file reset Reset Nginx, PHP, MySQL log file"},{"location":"commands/log/#log-show","title":"log show","text":"<p>Show Nginx, PHP, MySQL log file</p> <p>Usage:</p> <pre><code>wo log show [&lt;site_name&gt;] [options]&lt;/site_name&gt;\n</code></pre> optional arguments description <code>--nginx</code> Show Nginx Error logs file <code>--php</code> Show PHP Error logs file <code>--mysql</code> Show MySQL logs file <code>--wp</code> Show Site specific WordPress logs file"},{"location":"commands/maintenance/","title":"maintenance","text":"<p>Update apt-cache and upgrade packages.</p> <p></p> <p>Usage:</p> <pre><code>wo maintenance\n</code></pre> <p>This command is equivalent to:</p> <pre><code>apt update\napt dist-upgrade\napt autoremove --purge\napt autoclean\n</code></pre> <p>Package update is performed in a non-interactive way, with the \"--force-confold\" policy, to never overwrite packages configurations.</p>"},{"location":"commands/secure/","title":"Secure","text":"<p>Secure command secure WordOps backend auth, ip and port</p> <p></p> <p>Usage:</p> <pre><code>wo secure [options]\n</code></pre> <p>Options:</p> argument description <code>--auth</code> Set backend user credentials (user and) <code>--port</code> Set backend port (default: 22222) <code>--ip</code> Set the list of IP(s) allowed to access without authentification <code>--ssh</code> Harden SSH security <code>--sshport</code> Set custom ssh port (default: 22) <code>--allowpassword</code> Allow password authentification when hardening SSH security <code>--force</code> Force hardening SSH security without being prompt for confirmation <p>WordOps uses Basic Auth to protect the backend from unauthorize people. To change the authorization method, backend's port,... You can use <code>wo secure</code> command.</p>"},{"location":"commands/secure/#change-backend-credential","title":"Change backend credential","text":"<p>The user name and password of WordOps backend is showed when you create a first site. If you don't remember and want to reset, please use below command.</p> <pre><code>wo secure --auth\nProvide HTTP authentication user name [admin]:master\nProvide HTTP authentication password [5zVFELjHjShPPFr7qkoMzavP]:\n</code></pre> <p>Short hand:</p> <pre><code>wo secure --auth YourUsername aSecurePassword\n</code></pre>"},{"location":"commands/secure/#change-backend-port","title":"Change backend port","text":"<p>In case you want to change WordOps backend port from <code>22222</code>, use this command:</p> <pre><code>wo secure --port\nWordOps admin port [22222]:23456\nReload: nginx     [OK]\nSuccessfully port changed 23456\n</code></pre>"},{"location":"commands/secure/#change-whitelist-ips","title":"Change whitelist IPs","text":"<p>By default, WordOps only allow IP <code>127.0.0.1</code> to connect to their backend. To allow your IP (ex. <code>1.1.1.1</code>), use below command:</p> <pre><code>wo secure --ip\nEnter the comma separated IP addresses to white list [127.0.0.1]:1.1.1.1\nSuccessfully added IP address in acl.conf file\n</code></pre> <p>You can also edit directly the file <code>/etc/nginx/common/acl.conf</code></p>"},{"location":"commands/secure/#harden-ssh-security","title":"Harden SSH security","text":"<p>Warning</p> <p>To harden SSH security, WordOps render the configuration sshd_config from a template. In this template, root authentification with password is forbidden and by default password authentification is disabled. You can use the flag <code>--allowpassword</code> with <code>--ssh</code> to allow password authentification, but before running this command please make sure you will not be locked out of your server. Using password-less authentification with SSH keys is highly recommended.</p> <p>To harden SSH security you can use the command :</p> <pre><code>wo secure --ssh\n</code></pre> <p>Additionally, if you want to allow password authentification (not recommended), you can use :</p> <pre><code>wo secure --ssh --allowpassword\n</code></pre>"},{"location":"commands/secure/#change-ssh-port","title":"Change SSH port","text":"<p>To avoid bruteforce on SSH, it's recommended to use another port than the default port (22).</p> <p>Usage :</p> <pre><code>wo secure --sshport &lt;port&gt;\n</code></pre> <p>Exemple :</p> <pre><code>wo secure --sshport 2022\n</code></pre> <p>WordOps will automatically allow the new SSH port if UFW is enabled.</p>"},{"location":"commands/site/","title":"site","text":"<p>Performs website specific operations</p> <p>Usage:</p> <pre><code>wo site (command) [options]\n</code></pre> subcommand description create Create site with WordOps update Update site type or configuration info Get site information show Show site Nginx configuration edit Edit site Nginx configuration delete Delete site list List all sites enable Enable site in Nginx disable Disable site in Nginx cd Move into site webroot directory"},{"location":"commands/site/#site-create","title":"site create","text":""},{"location":"commands/site/#usage","title":"Usage","text":"<pre><code>wo site create  [&lt;site_name&gt;] [options]\n</code></pre>"},{"location":"commands/site/#basic-sites","title":"Basic sites","text":""},{"location":"commands/site/#html-site","title":"HTML site","text":"<p>To create simple html website use this command.</p> <pre><code>wo site create site.tld --html\n</code></pre>"},{"location":"commands/site/#php-site","title":"PHP site","text":"<p>To create simple php website with no database use this command.</p> <pre><code>wo site create site.tld --php\n</code></pre>"},{"location":"commands/site/#phpmysql-site","title":"PHP+MySQL site","text":"<p>To create simple php website with database use this command.</p> <pre><code>wo site create site.tld --mysql\n</code></pre> <p>NOTE: You can find MySQL database details in <code>/var/www/site.tld/wo-config.php</code>.</p>"},{"location":"commands/site/#proxy-site","title":"Proxy site","text":"<p>To create site with Proxy configuration you can use --proxy during site creation</p> <pre><code>wo site create site.tld --proxy=127.0.0.1:3000\n</code></pre> <p>This will create proxy site site.tld with proxy destination as 127.0.0.1:3000. Port is optional. Default port: 80.</p>"},{"location":"commands/site/#alias-site","title":"Alias site","text":"<p>To create an alias site you can use --alias during site creation</p> <pre><code>wo site create site.tld --alias sitetoredirect.tld\n</code></pre> <p>It will create a nginx vhost for site.tld which redirect to sitetoredirect.tld.</p>"},{"location":"commands/site/#wordpress","title":"WordPress","text":"<p>Following are the WordPress website types you can create website based on Cache Mechanism</p> <p>Standard WordPress site</p> <pre><code>wo site create site.tld --wp\n</code></pre> <p>WordPress site + Nginx fastcgi_cache</p> <pre><code>wo site create site.tld --wpfc\n</code></pre> <p>WordPress site + Redis cache</p> <pre><code>wo site create site.tld --wpredis\n</code></pre> <p>WordPress site + WP-Super-cache</p> <pre><code>wo site create site.tld --wpsc\n</code></pre> <p>WordPress site + WP-Rocket cache</p> <pre><code>wo site create site.tld --wprocket\n</code></pre> <p>WordPress site + Cache enabler</p> <pre><code>wo site create site.tld --wpce\n</code></pre> <p>Enable Ultimate Nginx bad blocker on new site</p> <pre><code>wo site create site.tld --ngxblocker\n</code></pre>"},{"location":"commands/site/#cheatsheet","title":"Cheatsheet","text":"Cache single site multisite w/ subdir multisite w/ subdom NO Cache <code>--wp</code> <code>--wpsubdir</code> <code>--wpsubdomain</code> WP Super Cache plugin <code>--wpsc</code> <code>--wpsubdir --wpsc</code> <code>--wpsubdomain --wpsc</code> Nginx fastcgi_cache <code>--wpfc</code> <code>--wpsubdir --wpfc</code> <code>--wpsubdomain --wpfc</code> Redis cache <code>--wpredis</code> <code>--wpsubdir --wpredis</code> <code>--wpsubdomain --wpredis</code> WP-Rocket plugin <code>--wprocket</code> <code>--wpsubdir --wprocket</code> <code>--wpsubdomain --wprocket</code> Cache-Enabler plugin <code>--wpce</code> <code>--wpsubdir --wpce</code> <code>--wpsubdomain --wpce</code>"},{"location":"commands/site/#extra-settings","title":"Extra settings","text":""},{"location":"commands/site/#define-wordpress-administrator-user","title":"Define WordPress administrator user","text":"<p>To define WordPress administrator user during site creation use</p> <pre><code>wo site create site.tld --user=admin\n</code></pre> <p>This will create admin as administrator user in WordPress during installation. If not defined it will take git user name.</p>"},{"location":"commands/site/#define-wordpress-administrator-password","title":"Define WordPress administrator password","text":"<p>To define WordPress administrator password during site creation use</p> <pre><code>wo site create site.tld --pass=password\n</code></pre> <p>This will set defined password as administrator password. If not defined it will generate random pasword for administrator. If you have special characters, you can quote them using single quotes like this:</p> <pre><code>--pass='my$secret&amp;'\n</code></pre>"},{"location":"commands/site/#define-wordpress-administrator-email","title":"Define WordPress administrator email","text":"<p>To define WordPress administrator email during site creation use</p> <pre><code>wo site create site.tld --email=wo@site.tld\n</code></pre> <p>This will set defined email as administrator email. If not defined it will set git email as administrator email.</p>"},{"location":"commands/site/#virtual-host-only","title":"Virtual host only","text":"<p>To create WordPress site and database without installing it, you can use --vhostonly during site creation</p> <p>For example, you can only create vhost and database without installing WordPress using following command:</p> <pre><code>wo site create site.tld --wp --vhostonly\n</code></pre>"},{"location":"commands/site/#additional-features","title":"Additional features","text":""},{"location":"commands/site/#lets-encrypt","title":"Let's Encrypt","text":"<p>WordOps supports Let's Encrypt out of the box.</p>"},{"location":"commands/site/#domain","title":"Domain","text":"<pre><code>wo site create site.tld --wp --letsencrypt\n</code></pre> <p>This command will issue a certificate for site.tld + www.site.tld.</p>"},{"location":"commands/site/#subdomain","title":"Subdomain","text":"<p>You can also issue Let's Encrypt certificates with subdomains.</p> <pre><code>wo site create sub.site.tld --wp --letsencrypt\n</code></pre> <p>Since the release v3.9.8.4, WordOps will automatically detect if the site is a domain or a subdomain, and will not issue a certificate for www alias with subdomains</p>"},{"location":"commands/site/#wildcard","title":"Wildcard","text":"<p>Since the release v3.9.6, WordOps supports Let's Encrypt Wildcard SSL certificates with DNS API validation. Before issuing a wildcard certificate, it require to define the DNS API crendentials for acme.sh.</p> <p></p> <p>Example with Cloudflare DNS:</p> <pre><code>export CF_Key=\"d7eab56a903f25dd4xxxxxxxxxxxxxxxxxxxx\"\nexport CF_Email=\"email@domain.com\"\n</code></pre> <p>Info</p> <p>More example in our guide about DNS API configuration</p> <p>After you define those variables with the command <code>export</code>, you can issue your certificate with</p> <pre><code>wo site create site.tld --wp --letsencrypt=wildcard --dns=dns_cf\n</code></pre> <ul> <li><code>--dns=dns_cf</code> can be replaced with another DNS provider supported by acme.sh. For DigitalOcean, it would be <code>--dns=dns_dgon</code></li> </ul>"},{"location":"commands/site/#hsts","title":"HSTS","text":"<p>Additionally you can enable HSTS on your site by adding the flag <code>--hsts</code> with <code>--letsencrypt</code></p> <pre><code>wo site create site.tld --wp --letsencrypt --hsts\n</code></pre>"},{"location":"commands/site/#php-82-php-82","title":"PHP 8.2 &amp; PHP 8.2","text":"<p>To create site with PHP 8.2 you can use --php82 during site creation</p> <p>For example, you can create WordPress site running on PHP 8.2 using following command:</p> <pre><code>wo site create site.tld --wp --php82\n</code></pre> <p>For a WordPress site running on PHP 8.3:</p> <pre><code>wo site create site.tld --wp --php83\n</code></pre> <p>To create simple php site running with PHP 8.3 with no database, you can use this command:</p> <pre><code>wo site create site.tld --php83\n</code></pre> <p>This is the same with PHP 8.2:</p> <pre><code>wo site create site.tld --php82\n</code></pre>"},{"location":"commands/site/#site-update","title":"site update","text":"<p>Update site configuration</p>"},{"location":"commands/site/#pre-update-policy","title":"Pre-update policy","text":"<p><code>wo site update</code> command follows following procedure while updating current site.</p> <p>Before Updating any site:</p> <ul> <li>Creates nginx configuration backup for site.</li> <li>Moves htdocs to backup while updating HTML/PHP/MySQL site.</li> <li>Creates database dump in backup.</li> <li>While updating current MySQL site WordOps uses same database for installing WordPress tables.</li> <li>All these backup are stored outside htdocs, in backup directory.</li> </ul>"},{"location":"commands/site/#wordops-possible-update-options","title":"WordOps possible Update Options","text":"WordOps Possible  Site Update Optionshtmlphpmysqlwpwpfcwpscwprediswpsubdomwpsubdom  +  wpfcwpsubdom + wpscwpsubdirwpsubdir + wpfcwpsubdir + wpscwpsubdir + wpschtml-\u2714\u2714\u2714\u2714\u2714\u2714\u2714\u2714\u2714\u2714\u2714\u2714\u2714php\u2718-\u2714\u2714\u2714\u2714\u2714\u2714\u2714\u2714\u2714\u2714\u2714\u2714mysql\u2718\u2718-\u2714\u2714\u2714\u2714\u2714\u2714\u2714\u2714\u2714\u2714\u2714wp\u2718\u2718\u2718-\u2714\u2714\u2714\u2714\u2714\u2714\u2714\u2714\u2714\u2714wpfc\u2718\u2718\u2718\u2714-\u2714\u2714\u2714\u2714\u2714\u2714\u2714\u2714\u2714wpsc\u2718\u2718\u2718\u2714\u2714-\u2714\u2714\u2714\u2714\u2714\u2714\u2714\u2714wpredis\u2718\u2718\u2718\u2714\u2714\u2714-\u2714\u2714\u2714\u2714\u2714\u2714\u2714wpsubdom\u2718\u2718\u2718\u2718\u2718\u2718\u2718-\u2714\u2714\u2718\u2718\u2718\u2718wpsubdom+wpfc\u2718\u2718\u2718\u2718\u2718\u2718\u2718\u2714-\u2714\u2718\u2718\u2718\u2718wpsubdom+wpsc\u2718\u2718\u2718\u2718\u2718\u2718\u2718\u2714\u2714\u2714\u2718\u2718\u2718\u2718wpsubdom+wpredis\u2718\u2718\u2718\u2718\u2718\u2718\u2718\u2714\u2714        -\u2718\u2718\u2718\u2718wpsubdir\u2718\u2718\u2718\u2718\u2718\u2718\u2718\u2718\u2718\u2718-\u2714\u2714\u2714wpsubdir+wpfc\u2718\u2718\u2718\u2718\u2718\u2718\u2718\u2718\u2718\u2718\u2714-\u2714\u2714wpsubdir+wpsc\u2718\u2718\u2718\u2718\u2718\u2718\u2718\u2718\u2718\u2718\u2714\u2714-\u2714wpsubdir+wpredis\u2718\u2718\u2718\u2718\u2718\u2718\u2718\u2718\u2718\u2718\u2714\u2714\u2714- <p>Example: updating site from basic wp to wp + fastcgi_cache:</p> <p></p>"},{"location":"commands/site/#usage_1","title":"Usage","text":"<p>Usage:</p> <pre><code>wo site update  [&lt;site_name&gt;] [options]\n</code></pre> options description <code>--html</code> update to html site <code>--php</code> update to php site <code>--mysql</code> update to MySQL + PHP site <code>--php74</code> update site to PHP 7.4 <code>--php80</code> update site to PHP 8.0 <code>--php81</code> update site to PHP 8.1 <code>--php82</code> update site to PHP 8.2 <code>--php83</code> update site to PHP 8.3 <code>--wp</code> update site to WordPress without cache <code>--wpfc</code> update site to WordPress with fastcgi_cache <code>--wpsc</code> update site to WordPress with wp-super-cache plugin <code>--wpredis</code> update site to WordPress with redis-cache <code>--wprocket</code> update site to WordPress with WP-Rocket plugin <code>--wpce</code> update site to WordPress with Cache-Enabler plugin <code>--wpsubdir</code> update site to WordPress multisite on subdirectories <code>--wpsubdomain</code> update site to WordPress multisite on subdomains <code>--password</code> update admin password for a WordPress site <code>--letsencrypt</code>,<code>-le</code> secure site with Let's Encrypt SSL certificate <code>--letsencrypt=wildcard</code> secure site/multisite with a wildcard SSL certificates <code>--letsencrypt=off</code> disable Let's Encrypt SSL certificate <code>--dns</code>, <code>--dns=&lt;dns api provider&gt;</code> issue Let's Encrypt certificate with DNS validation. default: <code>dns_cf</code> <code>--hsts</code>, <code>--hsts=off</code> Enable or disable HSTS on site secured with Let's Encrypt <code>--ngxblocker</code>, <code>--ngxblocker=off</code> Enable or disable Ultimate Nginx bad blocker"},{"location":"commands/site/#examples","title":"Examples","text":"<p>Update a WordPress site without cache (<code>--wp</code>), to WordPress with Nginx fastcgi_cache</p> <pre><code>wo site update site.tld --wpfc\n</code></pre> <p>Update a WordPress site running with PHP 8.2 to PHP 8.3</p> <pre><code>wo site update site.tld --php83\n</code></pre> <p>Update a site running with PHP 8.3 to PHP 8.1</p> <pre><code>wo site update site.tld --php81\n</code></pre> <p>Update a site running with PHP 8.1 or PHP 8.2 to PHP 8.3</p> <pre><code>wo site update site.tld --php83\n</code></pre> <p>Update a WordPress site with Nginx fastcgi_cache to WordPress with redis-cache</p> <pre><code>wo site update site.tld --wpredis\n</code></pre>"},{"location":"commands/site/#site-info","title":"site info","text":"<p>Get site information including cache backend, PHP version or user database credentials</p> <p></p> <p>Usage:</p> <pre><code>wo site info [&lt;site_name&gt;]\n</code></pre>"},{"location":"commands/site/#site-delete","title":"site delete","text":"<p>Delete site including webroot and database:</p> <p>Usage:</p> <pre><code>wo site delete  [&lt;site_name&gt;] [options]\n</code></pre> options description <code>--no-prompt</code> delete website without confirmation prompt <code>--files</code> delete only website files <code>--db</code> delete only database"},{"location":"commands/site/#site-edit","title":"site edit","text":"<p>Edit site Nginx configuration</p> <p></p> <p>Usage:</p> <pre><code>wo site edit [&lt;site_name&gt;]\n</code></pre> <p>You will be prompted to choose the text editor you prefer. Nano is highly recommended for beginners.</p>"},{"location":"commands/site/#site-cd","title":"site cd","text":"<p>Move into a site webroot directory</p> <p></p> <p>Usage:</p> <pre><code>wo site cd  [&lt;site_name&gt;]\n</code></pre>"},{"location":"commands/site/#site-list","title":"site list","text":"<p>List all sites managed with WordOps</p> <p></p> <p>Usage:</p> <pre><code>wo site list\n</code></pre>"},{"location":"commands/site/#site-show","title":"site show","text":"<p>Display site Nginx configuration</p> <p></p> <p>Usage:</p> <pre><code>wo site show  [&lt;site_name&gt;]\n</code></pre>"},{"location":"commands/site/#site-disable","title":"site disable","text":"<p>Disable site Nginx vhost</p> <p>Usage:</p> <pre><code>wo site disable  [&lt;site_name&gt;]\n</code></pre>"},{"location":"commands/site/#site-enable","title":"site enable","text":"<p>Enable site Nginx vhost</p> <p>Usage:</p> <pre><code>wo site enable  [&lt;site_name&gt;]\n</code></pre>"},{"location":"commands/stack/","title":"stack","text":"<p>Manage server stack operations</p> <p>Usage:</p> <pre><code>wo stack (command) [options]\n</code></pre> subcommand description install Install WordOps stacks upgrade Upgrade WordOps stack migrate Upgrade MariaDB stack remove Uninstall packages purge Uninstall &amp; purge packages reload Reload WordOps stack restart Restart WordOps stack stop Stop WordOps stack start Start WordOps stack <p>Info</p> <p>Options are the same for <code>wo stack install</code>, <code>wo stack remove</code> and <code>wo stack purge</code></p> <p>Stack available are:</p> options type description <code>--web</code> Group Nginx, PHP, MySQL, WP-CLI <code>--admin</code> Group phpMyAdmin, Adminer, Dashboard, Netdata, MySQLTuner ... <code>--utils</code> Group OpcacheGUI, Webgrind, Anemometer <code>--nginx</code> APT package nginx stack <code>--php</code> APT package Current supported PHP-FPM stack <code>--php74</code> APT package PHP7.4-FPM stack <code>--php80</code> APT package PHP8.0-FPM stack <code>--php81</code> APT package PHP8.1-FPM stack <code>--php82</code> APT package PHP8.2-FPM stack <code>--php83</code> APT package PHP8.3-FPM stack <code>--mysql</code> APT package MariaDB stack <code>--redis</code> APT package Redis stack <code>--wpcli</code> Binary WP-CLI : WordPress CLI <code>--phpmyadmin</code> Web App phpMyAdmin : Web interface for MySQL <code>--composer</code> Binary Composer : PHP dependencies manager <code>--netdata</code> Binary Netdata : Real-time monitoring suite <code>--dashboard</code> Web App WordOps dashboard <code>--extplorer</code> Web App eXtplorer Filemanager <code>--adminer</code> Web App adminer (phpmyadmin alternative) <code>--fail2ban</code> APT package Fail2ban : Bruteforce protection <code>--phpredisadmin</code> Web App phpredisadmin : Web interface for Redis <code>--proftpd</code> APT package proftpd stack : FTP server <code>--mysqltuner</code> Binary MySQLTuner stack : MySQL tuning tool <code>--ufw</code> APT package UFW : Firewall <code>--sendmail</code> APT package Sendmail MTA <code>--ngxblocker</code> Binary Ultimate Nginx bad bots blocker <code>--nanorc</code> Binary Nano editor syntax highlighting <code>--brotli</code> Configuration Enable/Disable Brotli compression if Nginx is installed"},{"location":"commands/stack/#packages-types","title":"Packages types","text":"<ul> <li>APT package are debian packages installed from APT repositories</li> <li>Binaries are simple executables</li> <li>Web App are php based applications</li> </ul>"},{"location":"commands/stack/#stack-install","title":"stack install","text":"<p>Usage:</p> <pre><code>wo stack install [options]\n</code></pre> <p>Without options, the stack <code>--web</code>, <code>--admin</code>, <code>--utils</code> will be installed</p>"},{"location":"commands/stack/#recommended-install","title":"Recommended install","text":"<pre><code>wo stack install\n</code></pre> <p>This will install the <code>--web</code> stack and <code>--admin</code> stack.</p> <p>Info</p> <p>You can define MariaDB and PHP version to install by default in <code>/etc/wo/wo.conf</code></p> <p>Nginx, Current supported PHP version, MariaDB, Netdata, Fail2Ban, WordOps dashboard, phpMyAdmin, Adminer, MySQLtuner, OpcacheGUI</p>"},{"location":"commands/stack/#web","title":"Web","text":"<pre><code>wo stack install --web\n</code></pre> <p>This will install Nginx, Current supported PHP version, MariaDB</p>"},{"location":"commands/stack/#admin-tools","title":"Admin tools","text":"<p>WordOps backend with WordOps-Dashboard, PHPmyAdmin, Adminer, OpcacheGUI etc..</p> <pre><code>wo stack install --admin\n</code></pre> <p>After installing the Admin stack, WordOps dashboard will be available on https://YOUR.SERVER.IP:22222 with the credentials displayed during the stack installation.</p>"},{"location":"commands/stack/#stack-upgrade","title":"stack upgrade","text":"<p>Upgrade stack safely and apply new configurations and optimizations</p> <p>Usage:</p> <pre><code>wo stack upgrade [options]\n</code></pre> options description <code>--all</code> Upgrade all stack <code>--web</code> Upgrade web stack <code>--admin</code> Upgrade admin tools stack <code>--nginx</code> Upgrade Nginx stack <code>--php74</code> Upgrade PHP 7.4 stack <code>--php80</code> Upgrade PHP 8.0 stack <code>--php81</code> Upgrade PHP 8.1 stack <code>--php82</code> Upgrade PHP 8.2 stack <code>--php83</code> Upgrade PHP 8.3 stack <code>--mysql</code> Upgrade MySQL stack <code>--wpcli</code> Upgrade WPCLI <code>--redis</code> Upgrade Redis <code>--netdata</code> Upgrade Netdata <code>--dashboard</code> Upgrade WordOps Dashboard <code>--composer</code> Upgrade Composer <code>--phpmyadmin</code> Upgrade phpMyAdmin <code>--adminer</code> Upgrade Adminer <code>--no-prompt</code> Upgrade Packages without any prompt <code>--force</code> Force Packages upgrade without any prompt <p><code>wo stack upgrade</code> make sure packages repositories are properly added, then it upgrade packages and for main stacks (Nginx, PHP-FPM &amp; MySQL, Redis), it also update configurations from the templates included in the current WordOps release and apply optimizations (especially for MySQL &amp; Redis)</p> <p>Currently <code>wo stack upgrade --mysql</code> will only update the package from the current MariaDB repository, but will not perform upgrades between major releases (10.1 -&gt; 10.3). For upgrade MariaDB, use <code>wo stack migrate --mariadb</code>.</p>"},{"location":"commands/stack/#stack-migrate","title":"stack migrate","text":"<p>Upgrade MariaDB to the MariaDB release defined in <code>/etc/wo/wo.conf</code></p> <p>Usage :</p> <pre><code>wo stack migrate --mariadb [options]\n</code></pre> <p>Options : <code>--force</code> : perform MariaDB upgrade without prompting for confirmation</p> <p></p>"},{"location":"commands/stack/#stack-remove","title":"stack remove","text":"<p>Remove stacks (without removing configurations or data for APT packages)</p> <p>Usage:</p> <pre><code>wo stack remove &lt;stack&gt; [options]\n</code></pre> options description <code>--all</code> Remove all stacks at once <code>--force</code> Force install/remove/purge without prompt <p>For APT packages, <code>wo stack remove</code> will just uninstall package without deleting their configurations or data. For binaries or web app, it will do the same than <code>wo stack purge</code></p>"},{"location":"commands/stack/#stack-purge","title":"stack purge","text":"<p>Remove and purge stacks (including configurations and data)</p> <p>Warning</p> <p>Please be careful when using <code>wo stack purge</code> because it will remove APT packages but also purge all configurations or data, including MySQL databases, Redis databases or Nginx vhosts.</p> <p>Usage:</p> <pre><code>wo stack purge &lt;stack&gt; [options]\n</code></pre> options description --all Remove all stacks at once --force Force install/remove/purge without prompt"},{"location":"commands/stack/#stack-restart","title":"stack restart","text":"<p>Restart Stack service</p> <p>Usage:</p> <pre><code>wo stack restart [options]\n</code></pre>"},{"location":"commands/stack/#stack-reload","title":"stack reload","text":"<p>Reload Stack service</p> <p>Usage:</p> <pre><code>wo stack reload [options]\n</code></pre>"},{"location":"commands/stack/#stack-start","title":"stack start","text":"<p>Start Stack service</p> <p>Usage:</p> <pre><code>wo stack start [options]\n</code></pre>"},{"location":"commands/stack/#stack-stop","title":"stack stop","text":"<p>Stop Stack service</p> <p>Usage:</p> <pre><code>wo stack stop [options]\n</code></pre>"},{"location":"commands/stack/#stack-status","title":"stack status","text":"<p>Display Stack service status</p> <p></p> <p>Usage:</p> <pre><code>wo stack status [options]\n</code></pre>"},{"location":"commands/update/","title":"update","text":"<p>Update WordOps to the latest release available</p> <p></p> <p>Usage:</p> <pre><code>wo update [options]\n</code></pre> <p>Without argument, the command <code>wo update</code> will update WordOps only if a newer version is available.</p> optional arguments description <code>--force</code> Force WordOps update to the last release"},{"location":"getting-started/creating-sites/","title":"Creating site","text":"<p>You can create site with WordOps by using the command <code>wo site create</code>.</p> <p>WordOps will always:</p> <ul> <li>install required stack if needed</li> <li>configure Nginx vhost</li> <li>create site directory</li> </ul> <p>WordOps can also:</p> <ul> <li>create the site database</li> <li>install WordPress (with or without caching)</li> <li>secure site with Let's Encrypt SSL certificate</li> </ul> <p>You can see all the options available to create site in the command list site create</p>"},{"location":"getting-started/creating-sites/#additional-information","title":"Additional information","text":"Component Path Site files <code>/var/www/site.tld/htdocs</code> wp-config.php <code>/var/www/site.tld/wp-config.php</code> Additional Nginx conf <code>/var/www/site.tld/conf/nginx/</code> Site access/error logs <code>/var/www/site.tld/logs</code>"},{"location":"getting-started/creating-sites/#examples","title":"Examples","text":""},{"location":"getting-started/creating-sites/#basic-site","title":"Basic site","text":"<p>Basic html site</p> <pre><code>wo site create site.tld --html\n</code></pre> <p>Simple PHP site</p> <pre><code>wo site create site.tld --php\n</code></pre> <p>Simple PHP + MySQL site</p> <pre><code>wo site create site.tld --mysql\n</code></pre>"},{"location":"getting-started/creating-sites/#wordpress-site","title":"WordPress site","text":"<p>Simple WordPress site</p> <pre><code>wo site create site.tld --wp\n</code></pre> <p>WordPress site with Nginx fastcgi_cache</p> <pre><code>wo site create site.tld --wpfc\n</code></pre> <p>WordPress site with Redis cache</p> <pre><code>wo site create site.tld --wpredis\n</code></pre>"},{"location":"getting-started/creating-sites/#php-81","title":"PHP 8.1","text":"<p>Simple PHP 8.1 + MySQL site</p> <pre><code>wo site create site.tld --mysql --php81\n</code></pre> <p>Simple PHP 8.1 site</p> <pre><code>wo site create site.tld --php81\n</code></pre> <p>Simple WordPress site with PHP 8.1</p> <pre><code>wo site create site.tld --wp --php81\n</code></pre>"},{"location":"getting-started/creating-sites/#lets-encrypt","title":"Let's Encrypt","text":"<p>WordPress site secured with Let's Encrypt</p> <pre><code>wo site create site.tld --wp -le\n</code></pre> <p>WordPress site on subdomain secure with Let's Encrypt</p> <pre><code>wo site create sub.site.tld --wp -le\n</code></pre> <p>Since the release v3.9.8.4, WordOps will automatically detect if the site is a domain or a subdomain, and will not issue a certificate for www alias with subdomains</p> <p>WordPress site with PHP 8.1 and secured by Let's Encrypt</p> <pre><code>wo site create site.tld --wp --php81 -le\n</code></pre> <p>Create WordPress subdomain multisite secured with a Let's Encrypt Wildcard SSL certificate</p> <p>Info</p> <p>More information about wildcard SSL certificates our guide about DNS API configuration</p> <pre><code>wo site create site.tld --wpsubdomain --letsencrypt=wildcard --dns=dns_cf\n</code></pre>"},{"location":"getting-started/installation-guide/","title":"Installation","text":""},{"location":"getting-started/installation-guide/#one-step-automated-install","title":"One-Step Automated Install","text":"<p>We provide an installer script which install the required dependencies, before setting-up WordOps. It can be installed with the following command:</p> <pre><code>wget -qO wo wops.cc &amp;&amp; sudo bash wo\n</code></pre> What are the tasks performed by the install script ? <ul> <li>Installing WordOps dependencies</li> <li>Enabling automated security updates with unattended-upgrades</li> <li>Enabling NTP World Time Synchronization</li> <li>Detecting a previous EasyEngine or WordOps installation</li> <li>Importing existant sites into WordOps</li> <li>Installing WP-CLI</li> <li>Installing Acme.sh</li> <li>Installing Wordops</li> </ul>"},{"location":"getting-started/installation-guide/#alternative-clone-github-repository-and-run","title":"Alternative: Clone Github repository and run","text":"<pre><code>git clone https://github.com/WordOps/WordOps.git\ncd WordOps/\nsudo bash install\n</code></pre> <p>Info</p> <p>During the installation, you will be prompt for an username and an email address. WordOps need those informations to configure Git version control and to use it for saving server configurations. Your informations will only be stored in the file .gitconfig.</p>"},{"location":"getting-started/installation-guide/#manual-installation","title":"Manual Installation","text":"<p>If you prefer to perform yourself the same steps than our installer script, here how to install WordOps manually.</p> <p>deprecated</p> <p>Manual installation instructions are outdated and should not be used to install WordOps. We are now using Python virtualenv to avoid conflicts with other Python packages installed on your server.</p>"},{"location":"getting-started/installation-guide/#install-wordops-dependencies","title":"Install WordOps dependencies","text":"<pre><code># update packages list\napt-get update\n\n# On Ubuntu\napt-get -option=Dpkg::options::=--force-confmiss --option=Dpkg::options::=--force-confold --assume-yes install \\\nbuild-essential curl gzip python3-pip python3-wheel python3-apt python3-setuptools python3-dev sqlite3 git tar software-properties-common pigz \\\ngnupg2 cron ccze rsync apt-transport-https tree haveged ufw unattended-upgrades tzdata ntp\n\n# On Debian\napt-get -option=Dpkg::options::=--force-confmiss --option=Dpkg::options::=--force-confold --assume-yes install \\\nbuild-essential curl gzip dirmngr sudo python3-pip python3-wheel python3-apt python3-setuptools python3-dev ca-certificates sqlite3 git tar \\\nsoftware-properties-common pigz apt-transport-https gnupg2 cron ccze rsync tree haveged ufw unattended-upgrades tzdata ntp\n</code></pre>"},{"location":"getting-started/installation-guide/#create-wordops-directories","title":"create WordOps directories","text":"<pre><code>mkdir -p /var/log/wo /var/lib/wo/tmp /var/lib/wo-backup\n</code></pre>"},{"location":"getting-started/installation-guide/#update-pip","title":"Update PIP","text":"<pre><code>python3 -m pip install -U pip\npython3 -m pip install -U setuptools wheel\n</code></pre>"},{"location":"getting-started/installation-guide/#install-wordops","title":"Install WordOps","text":"<pre><code># install wordops from PyPi\npython3 -m pip install -U wordops\n\n# copy configuration\ncp -rf /usr/local/lib/python3.*/dist-packages/usr/* /usr/\ncp -rn /usr/local/lib/python3.*/dist-packages/etc/* /etc/\ncp -f /usr/local/lib/python3.*/dist-packages/etc/bash_completion.d/wo_auto.rc /etc/bash_completion.d/wo_auto.rc\n</code></pre>"},{"location":"getting-started/installation-guide/#install-acmesh","title":"Install acme.sh","text":"<pre><code># clone the repository\ngit clone https://github.com/Neilpang/acme.sh.git /opt/acme.sh -q\n\n# create conf directory\nmkdir -p /etc/letsencrypt/{config,live,renewal}\n\n# install acme.sh\ncd /opt/acme.sh\n./acme.sh --install \\\n--home /etc/letsencrypt \\\n--config-home /etc/letsencrypt/config \\\n--cert-home /etc/letsencrypt/renewal\n\n# enable auto-upgrade\n/etc/letsencrypt/acme.sh --config-home '/etc/letsencrypt/config' --upgrade --auto-upgrade\n\n# create .well-known directory\nmkdir -p /var/www/html/.well-known/acme-challenge\n\n# set www-data as owner\nchown -R www-data:www-data /var/www/html /var/www/html/.well-known\n\n# set permissions\nchmod 750 /var/www/html /var/www/html/.well-known\n</code></pre>"},{"location":"getting-started/installation-guide/#install-wp-cli","title":"Install WP-CLI","text":"<pre><code>wget -qO /usr/local/bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nchmod +x /usr/local/bin/wp\n</code></pre>"},{"location":"getting-started/post-install-steps/","title":"Post-install Steps","text":"<p>These are the first steps after you install WordOps. If you haven't installed it already, please check the installation guide.</p>"},{"location":"getting-started/post-install-steps/#enable-bash_completion","title":"Enable bash_completion","text":"<p>To enable WordOps commands auto-completion, run the following command after WordOps installation:</p> <pre><code>source /etc/bash_completion.d/wo_auto.rc\n</code></pre>"},{"location":"getting-started/post-install-steps/#creating-an-alias-for-sudo-wo","title":"Creating an alias for sudo wo","text":"<p>If you want to be able to use directly the command <code>wo</code> as non-root user, you can add a bash alias to automatically add <code>sudo</code> in front of the command <code>wo</code>.</p> <p>Use the following command to add the alias :</p> <pre><code>echo -e \"alias wo='sudo -E wo'\" &gt;&gt; $HOME/.bashrc\n</code></pre> <p>Then apply it with <code>source $HOME/.bashrc</code></p>"},{"location":"getting-started/post-install-steps/#installing-wordops-stacks-optional","title":"Installing WordOps stacks (optional)","text":"<p>You can install WordOps main stacks with the following command before creating your first site, or create directly a site and WordOps will install required stacks.</p> <p>Installing WordOps main stacks</p> <pre><code>wo stack install\n</code></pre> <p>Info</p> <p>You can define MariaDB and PHP version to install by default in <code>/etc/wo/wo.conf</code></p> <p></p> <p>Here the list of WordOps components installed with the above command:</p> Packages type Description Nginx APT package WordOps web server PHP APT package Current supported PHP release MariaDB 11.4 APT package Latest LTS MariaDB release WP-CLI Binary The WordPress command-line tool Composer Binary PHP packages manager MySQLTuner Binary Command-line tool to tune MySQL Fail2ban APT package Authentication bruteforce protection phpMyAdmin Web App MySQL server web interface Adminer Web App lightweight phpMyAdmin alternative OpcacheGUI Web App web interface for Opcache monitoring Netdata Binary Monitoring suite WordOps dashboard Web App Bootstrap template for WordOps backend eXtplorer Web App Web File manager cheat.sh Binary Command-line Linux cheatsheet Sendmail APT package Sendmail MTA"},{"location":"getting-started/post-install-steps/#packages-types","title":"Packages types","text":"<ul> <li>APT package are Debian packages installed from APT repositories</li> <li>Binaries are simple executables (do not use any server resources when you are not running them)</li> <li>Web App are PHP based applications</li> </ul>"},{"location":"getting-started/post-install-steps/#wordops-backend","title":"WordOps backend","text":"<p>After installing Nginx, WordOps will display your login credentials to access to WordOps backend. You haven't saved them ? Don't worry, you can change them at anytime with the command :</p> <pre><code>wo secure --auth\n</code></pre> <p>You will be prompted for a username and a password. If empty, WordOps will use the default username set during the installation and will generate a random password.</p> <p>You should now be able to access WordOps backend on <code>https://YOUR.SERVER.IP:22222</code> or <code>https://yourserver.hostname.tld:22222</code>. You will probably be warned about the SSL certificate, but you can learn how to secure WordOps backend with a valid SSL certificate in the next part.</p>"},{"location":"getting-started/post-install-steps/#securing-wordops-backend","title":"Securing WordOps backend","text":"<p>To secure WordOps backend with a valid SSL certificate, you just have to create a basic site with the domain/subdomain of your choice. WordOps will automatically use the first SSL certificate issued to secure the backend.</p> <p>Example :</p> <pre><code>wo site create server.domain.tld -le\n</code></pre> <p>Then you will be able to access to the backend with : <code>https://server.domain.tld:22222</code></p>"},{"location":"getting-started/post-install-steps/#enabling-ufw-firewall","title":"Enabling UFW Firewall","text":"<p>If you haven't already configured a firewall on your server, you can use WordOps to automatically configure UFW with a minimal rules set for WordOps.</p> <pre><code>wo stack install --ufw\n</code></pre>"},{"location":"getting-started/prerequesites/","title":"Prerequesites","text":""},{"location":"getting-started/prerequesites/#hardware-requirements","title":"Hardware requirements","text":""},{"location":"getting-started/prerequesites/#resources","title":"Resources","text":""},{"location":"getting-started/prerequesites/#minimum","title":"Minimum","text":"<p>WordOps is very lightweight, it doesn't require a lot of resources and can be installed on low end devices like Raspberry PI. Minimum requirements are:</p> <ul> <li>~100MB of storage</li> <li>512MB RAM</li> </ul>"},{"location":"getting-started/prerequesites/#recommended","title":"Recommended","text":"<p>However, if you are going to use WordOps in production, some services like MySQL or Redis may need more resources, and running WordOps stacks without enough resources could impact your sites performance. Resources usage also highly depend on your site traffic.</p> <p>Here our recommended hardware configuration for production:</p> <ul> <li>Multi-core CPU</li> <li>20GB SSD storage</li> <li>2GB RAM</li> </ul>"},{"location":"getting-started/prerequesites/#virtualization","title":"Virtualization","text":"<p>The following virtualization platforms are supported:</p> <ul> <li>VMware</li> <li>XEN</li> <li>OpenVZ</li> <li>KVM</li> <li>Hyper-V</li> <li>LXC / LXD</li> </ul> <p>WordOps is also compatible with Ubuntu running on Windows Linux Subsystem (WSL).</p>"},{"location":"getting-started/prerequesites/#software-requirements","title":"Software requirements","text":""},{"location":"getting-started/prerequesites/#operating-systems","title":"Operating Systems","text":"<p>The following operating systems are supported:</p> Distribution Release Architecture Ubuntu 24.04 LTS (noble) x86_64 22.04 LTS (jammy) x86_64 20.04 LTS (focal) x86_64 Debian 10 (buster) x86_64 11 (bullseye) x86_64 12 (bookworm) x86_64 Raspbian 10 (buster) armv7l 11 (bullseye) armv7l 12 (bookworm) armv7l"},{"location":"getting-started/prerequesites/#ports","title":"Ports","text":"Service Port Inbound Outbound Notes SSH 22 \u2713 \u2713 SSH default or custom port HTTP 80 \u2713 \u2713 Nginx listen on port 80 HTTPS 443 \u2713 \u2713 Nginx listen on port 443 WordOps Backend 22222 \u2713 \u2713 WordOps backend is available on port 22222 and is password protected GnuPG 1137 \u2713 Required to import APT repositories GPG keys."},{"location":"getting-started/prerequesites/#server-configuration-recommendations","title":"Server configuration recommendations","text":"<ul> <li>Set a valid server hostname (see below)</li> </ul> Proper server hostname configuration <p>Server hostname isn't only a name, it's the server public identity on the network. If your server is directly connected to internet(not behind a NAT), it should have a valid hostname.</p> <p>A valid hostname should looks like : myservername.yourdomain.tld</p> <ul> <li>myservername is the server name</li> <li>yourdomain.tld is one of your domains</li> </ul> <p>To edit hostname properly, use the command :</p> <pre><code>hostnamectl set-hostname &lt;yourserver.hostname.tld&gt;\n</code></pre> <p>To apply the new hostname, a reboot is required. The last step and the most important, you should create the proper DNS records to make the subdomain myservername.yourdomain.tld pointing to your server IP.</p>"},{"location":"getting-started/wordops-structure/","title":"WordOps structure","text":""},{"location":"getting-started/wordops-structure/#wordops-directories","title":"WordOps directories","text":"Path Description <code>/etc/wo</code> General configuration <code>/var/lib/wo/dbase.db</code> WordOps sites databases <code>/var/lib/wo/tmp</code> tmp directory <code>/usr/lib/wo/templates</code> WordOps templates"},{"location":"getting-started/wordops-structure/#acmesh-letsencrypt-integration","title":"acme.sh - letsencrypt integration","text":"Path Description <code>/etc/letsencrypt</code> acme.sh directory <pre><code>letsencrypt\n\u251c\u2500\u2500 acme.sh # acme executable\n\u251c\u2500\u2500 acme.sh.env # env configuration\n\u251c\u2500\u2500 config/ # acme.sh configuration\n\u251c\u2500\u2500 deploy/ # internal\n\u251c\u2500\u2500 dnsapi/ # internal\n\u251c\u2500\u2500 live/ # live SSL certificates\n\u251c\u2500\u2500 notify/ # internal\n\u2514\u2500\u2500 renewal/ # certificates configuration\n</code></pre>"},{"location":"guides/enable-live-kernel-patching/","title":"Enable live kernel patching on Ubuntu","text":"<p>On linux servers, kernel updates usually require a reboot to apply the last security patches. But there are several live kernel patching solutions available and in this short guide we will see how to enable Canonical Livepatch to apply critical kernel security fixes on your Ubuntu LTS server without rebooting.</p>"},{"location":"guides/enable-live-kernel-patching/#requirements","title":"Requirements","text":"<p>Canonical Livepatch service is available on Ubuntu 14.04 LTS, 16.04 LTS, and 18.04 LTS.</p> <p>This service is free for up to 3 machines (server, desktop or cloud).</p>"},{"location":"guides/enable-live-kernel-patching/#setup","title":"Setup","text":"<ol> <li> <p>Get your Livepatch token on https://auth.livepatch.canonical.com/</p> </li> <li> <p>Install the Livepatch daemon : <code>sudo snap install canonical-livepatch</code></p> </li> <li> <p>Enable Canonical Livepatch with your token : <code>sudo canonical-livepatch enable [TOKEN]</code></p> </li> </ol>"},{"location":"guides/manage-ssl-certificates/","title":"Manage Let's Encrypt SSL certificates","text":"<p>In this guide, we will explain how to issue a Let's Encrypt SSL certificate to secure your site and the different options available.</p> <p>To issue a SSL certificate with WordOps, you can use the following arguments with the commands:</p> <ul> <li><code>wo site create</code></li> <li><code>wo site update</code></li> </ul> options description <code>--letsencrypt</code> / <code>-le</code> issue a SSL certificate for domain or subdomain <code>--letsencrypt=wildcard</code> issue a wildcard SSL certificate: domain.tld + *.domain.tld <code>--dns</code> / <code>--dns=&lt;dns_api&gt;</code> use DNS API validation for Acme challenge. required for wildcard certificates <p><code>-le</code> is an alias for <code>--letsencrypt</code>. You can use this alias with all letsencrypt commands.</p> <p>For example, <code>--letsencrypt=wildcard</code> is the same than <code>-le=wildcard</code></p>"},{"location":"guides/manage-ssl-certificates/#issuing-a-certificate","title":"Issuing a certificate","text":""},{"location":"guides/manage-ssl-certificates/#webroot-mode","title":"Webroot mode","text":"<p>By default WordOps use the Webroot mode to validate the domain. This mode doesn't require any additional configuration.</p>"},{"location":"guides/manage-ssl-certificates/#domain-wwwdomaintld","title":"domain + www.domain.tld","text":"<p>To create a new site:</p> <pre><code>wo site create site.tld --wp -le\n</code></pre> <p>To secure an existant site:</p> <pre><code>wo site update site.tld -le\n</code></pre>"},{"location":"guides/manage-ssl-certificates/#sub-domain","title":"sub-domain","text":"<p>To create a new site:</p> <pre><code>wo site create sub.site.tld --wp -le\n</code></pre> <p>To secure an existant site:</p> <pre><code>wo site update sub.site.tld -le\n</code></pre>"},{"location":"guides/manage-ssl-certificates/#dns-api-mode","title":"DNS API mode","text":"<p>Warning</p> <p>Read first our guide about DNS API configuration</p>"},{"location":"guides/manage-ssl-certificates/#domain-or-subdomain","title":"domain or subdomain","text":"<p>To create a new site with Cloudflare DNS API:</p> <pre><code>wo site create site.tld --wp -le --dns=dns_cf\n</code></pre> <p>To secure an existant site with DigitalOcean DNS API:</p> <pre><code>wo site update sub.site.tld -le --dns=dns_dgon\n</code></pre>"},{"location":"guides/manage-ssl-certificates/#wildcard","title":"wildcard","text":"<p>To create a new site with Cloudflare DNS API:</p> <pre><code>wo site create site.tld --wp --letsencrypt=wildcard --dns=dns_cf\n</code></pre> <p>To secure an existant site with DigitalOcean DNS API:</p> <pre><code>wo site update site.tld -le=wildcard --dns=dns_dgon\n</code></pre>"},{"location":"guides/migration-from-easyengine/","title":"Migration from EasyEngine v3","text":""},{"location":"guides/migration-from-easyengine/#running-wordops-install-script","title":"Running WordOps install script","text":"<p>The first step to migrate from EasyEngine to WordOps is to run WordOps install script with the command:</p> <pre><code>wget -qO wo wops.cc &amp;&amp; sudo bash wo\n</code></pre> <p>Info</p> <p>Before installing WordOps, the install script will backup all previous EasyEngine configurations. You will find them after the installation in <code>/var/lib/wo-backup</code>.</p> <p>It will also create all new Nginx configurations before syncing the old nginx directory with the new one. This way, if you have added custom Nginx configuration, you will find them at the same place than before the migration.</p>"},{"location":"guides/migration-from-easyengine/#post-installation-steps","title":"Post installation steps","text":"<p>After installing WordOps, if all your sites are still working properly, you can start using WordOps the same way as EasyEngine. For sites previously created with EasyEngine, you will have to change some settings in their configuration to use WordOps new configurations. This can be done with the command <code>wo site update</code> or by editing manually their configuration with the command <code>wo site edit</code>.</p> <p>Warning</p> <p>If some sites are still using php5.6 or php7.0 and are not compatible with newer PHP versions, do not change their vhost configuration. WordOps minimum and default PHP version is PHP 7.2. Additionally, sites previously created with <code>--w3tc</code>  will have to use another cache option as we deprecated this stack.</p>"},{"location":"guides/migration-from-easyengine/#updating-site-configuration","title":"Updating site configuration","text":"<p>You have the choice between two methods to update your site configuration:</p> <ul> <li> <p>With the command <code>wo site update</code> (recommended)</p> </li> <li> <p>Manually with the command <code>wo site edit</code></p> </li> </ul>"},{"location":"guides/migration-from-easyengine/#using-the-command-wo-site-update","title":"Using the command <code>wo site update</code>","text":"<p>The easiest way to update your site with the new WordOps configurations is to use the command:</p> <pre><code>wo site update site.tld &lt;options&gt;\n</code></pre> <p>To update your sites configuration, you can enable PHP 7.3 on your site with the argument <code>--php73</code> and then disable it with the argument <code>--php72</code> to use PHP 7.2. This will regenerate your site Nginx vhost and apply the new configuration.</p> <p>Example:</p> <pre><code># enable PHP 7.3 to regenerate site configuration\nwo site update site.tld --php73\n# disable PHP 7.3 to use PHP 7.2 (optional)\nwo site update site.tld --php72\n</code></pre>"},{"location":"guides/migration-from-easyengine/#manually-editing-site-configuration","title":"Manually editing site configuration","text":"<p>You can edit sites configuration with the command:</p> <pre><code>wo site edit site.tld\n</code></pre> <p>Info</p> <p>You will be prompted to choose a text editor, if you are new to linux, we recommend you to choose nano.</p> <p>In Nginx vhost configuration, you will find several lines beginning with <code>include</code>.</p> <p>To use the new WordOps configuration, you just have to replace the path of the configuration set after <code>include</code>.  For example <code>include common/locations.conf;</code> has to be replaced by <code>include common/locations-wo.conf;</code>.</p> <p>Warning</p> <p>Make sure to not remove the <code>;</code> at the end of the line when updating Nginx configuration.</p> <p>For all WordPress related configuration files like <code>wpsc.conf</code> or <code>wpfc-php7.conf</code>, new configurations files are just named <code>wpsc-php72.conf</code> or <code>wpfc-php72.conf</code>.</p> <p>There are some exceptions, list here:</p> Previous configuration New configuration common/locations.conf common/locations-wo.conf common/locations-php7.conf common/locations-wo.conf common/php.conf common/php72.conf common/php7.conf common/php72.conf"},{"location":"guides/migration-from-easyengine/#removing-previous-php-version","title":"Removing previous PHP version","text":"<p>If you do not need php5.6 and php7.0 anymore, you can safely remove them with the following commands:</p> <pre><code># php5.6\napt-get -y autoremove php5.6-fpm php5.6-common --purge\n\n# php7.0\napt-get -y autoremove php7.0-fpm php7.0-common --purge\n</code></pre>"},{"location":"guides/migration-from-easyengine/#upgrading-mariadb-to-103","title":"Upgrading MariaDB to 10.3","text":"<p>Warning</p> <p>Before upgrading MariaDB, we strongly recommend you to perform a backup of your MySQL databases.</p>"},{"location":"guides/migration-from-easyengine/#backup-your-databases","title":"Backup your databases","text":"<p>You can backup your MySQL databases with this simple bash script:</p> <pre><code>wget https://git.io/JeGSb -O mysqldump.sh\nchmod +x mysqldump.sh\n</code></pre> <p>Then perform a full backup:</p> <pre><code>./mysqldump.sh --full\n</code></pre> <p>This will backup the whole MySQL server and store the gzipped dump in /var/www/mysqldump</p> <p>Additionally you can make a copy of the <code>/var/lib/mysql</code> directory:</p> <pre><code>sudo service mysql stop\nsudo cp -rf /var/lib/mysql /var/lib/mysql-bak\nsudo service mysql start\n</code></pre>"},{"location":"guides/migration-from-easyengine/#upgrading-mariadb","title":"Upgrading MariaDB","text":"<p>At first, you need to remove the current MariaDB-server installed. To do so, use the command:</p> <pre><code>sudo apt-get autoremove mariadb-server -y\n</code></pre> <p>Then you can reinstall the latest MariaDB-server version with WordOps:</p> <pre><code>wo stack install --mysql\n</code></pre> <p>And finally make sure any database table structure upgrades are applied:</p> <pre><code>wo stack upgrade --mysql\n</code></pre>"},{"location":"guides/wordops-with-digitalocean-volume/","title":"Use WordOps with DigitalOcean's volume","text":"<p>This is assuming you start with a brand new droplet and a brand new volume.</p>"},{"location":"guides/wordops-with-digitalocean-volume/#getting-started","title":"Getting Started","text":"<p>1) Create Droplet.</p> <p>2) Add volume \u2013&gt; Automatically format and mount</p> <p>This guide is based as if your volume would be named: <code>YOUR-VOLUME</code></p> <p>3)  Login to the droplet from the console, will ask for root password change.</p> <p>4) Create directory <code>/var/www</code> where we will mount the volume and WordOps will be installed.</p> <pre><code>mkdir -p /var/www\n</code></pre>"},{"location":"guides/wordops-with-digitalocean-volume/#mounting-the-volume","title":"Mounting the volume","text":"<p>Steps 5 and 6 are according to DigitalOcean -&gt; Volumes -&gt; 'More' tab of <code>YOUR-VOLUME</code> -&gt; Config instructions</p> <p>5) Mount Digital Ocean's volume in <code>/var/www</code></p> <pre><code>mount -o discard,defaults,noatime /dev/disk/by-id/scsi-0DO_Volume_YOUR-VOLUME /var/www\n</code></pre> <p>6) Change fstab so the volume will be mounted after a reboot</p> <pre><code>echo '/dev/disk/by-id/scsi-0DO_Volume_YOUR-VOLUME /var/www ext4 defaults,nofail,discard 0 0' | sudo tee -a /etc/fstab\n</code></pre>"},{"location":"guides/wordops-with-digitalocean-volume/#installing-wordops","title":"Installing WordOps","text":"<p>7) Install WordOps According to One-Step Automated WordOps Install</p> <pre><code>wget -qO wo wops.cc &amp;&amp; sudo bash wo\n</code></pre> <p>You can enable autocomplete right after install with: <code>source /etc/bash_completion.d/wo_auto.rc</code></p> <p>8)  Install WordOps stacks (optional)</p> <pre><code>wo stack install\n</code></pre> <p>And that's it!</p>"},{"location":"guides/wordops-with-digitalocean-volume/#notes","title":"Notes","text":"<ul> <li>Just check with <code>df -h</code> or in netdata if <code>/var/www/</code> is shown with the correct size of your volume.</li> </ul>"},{"location":"guides/wordpress-migration/","title":"WordPress sites migration","text":""},{"location":"guides/wordpress-migration/#context","title":"Context","text":"<p>You want to migrate a WordPress site hosted on a server running EEv3 or WordOps to a new one running with WordOps. The site you want to migrate was created with the flag <code>--wpredis</code></p> <p>In our example :</p> <ul> <li>new server name is NEW-SRV with IP 10.0.0.1</li> <li>the previous server is OLD-SRV with IP 192.168.0.1</li> <li>site domain is mydomain.tld</li> </ul>"},{"location":"guides/wordpress-migration/#on-the-previous-server-old-srv","title":"On the previous server (OLD-SRV)","text":""},{"location":"guides/wordpress-migration/#dump-wordpress-database","title":"Dump WordPress database","text":"<p>Go into your site directory and dump WordPress database with WP-CLI</p> <pre><code>cd /var/www/mydomain.tld/htdocs\nwp db export --allow-root\n</code></pre> <p>Info</p> <p>If WP-CLI isn't installed on your server, you can get it by running the following commands : <pre><code>curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nchmod +x wp-cli.phar\nsudo mv wp-cli.phar /usr/local/bin/wp\n</code></pre></p>"},{"location":"guides/wordpress-migration/#on-the-new-server-new-srv","title":"On the new server (NEW-SRV)","text":""},{"location":"guides/wordpress-migration/#initial-server-update","title":"Initial server update","text":"<pre><code>apt-get update &amp;&amp; apt-get dist-upgrade -y &amp;&amp; apt-get autoremove --purge -y &amp;&amp; apt-get autoclean\n</code></pre>"},{"location":"guides/wordpress-migration/#install-wordops-and-main-stacks","title":"Install WordOps and main stacks","text":"<pre><code>wget -qO wo wops.cc &amp;&amp; sudo bash wo\nwo stack install\n</code></pre>"},{"location":"guides/wordpress-migration/#create-an-empty-wordpress-site-with-same-domain","title":"Create an empty wordpress site with same domain","text":"<pre><code>wo site create mydomain.tld --wpredis --vhostonly\n</code></pre>"},{"location":"guides/wordpress-migration/#setup-a-password-less-ssh-access-between-your-servers","title":"Setup a password-less ssh access between your servers","text":""},{"location":"guides/wordpress-migration/#generate-ssh-keys","title":"Generate SSH-Keys","text":"<p>If the user on the new server do not have ssh-keys yet, you can generate them with the following command :</p> <pre><code>ssh-keygen -t ed25519\n</code></pre> <p>Then just press enter to confirm ssh key path. Your public ssh key should be available in the directory <code>~/.ssh/</code> ( <code>/root/.ssh/</code> if you are logged in as root )</p>"},{"location":"guides/wordpress-migration/#add-ssh-public-key-to-old-srv","title":"Add SSH Public key to OLD-SRV","text":"<p>You can use the following command to automatically add the public SSH Key to the server :</p> <pre><code>ssh-copy-id root@192.168.0.1\n</code></pre> <p>Otherwise, you can still display the public ssh-key with the command <code>cat ~/.ssh/id_ed25519.pub</code> and copy it manually in the file <code>~/.ssh/authorized_keys</code> of the other server.</p>"},{"location":"guides/wordpress-migration/#ssh-login-without-password","title":"SSH Login without password","text":"<p>You should now be able to login from the server where you generated the SSH Keys to the other one without password :</p> <pre><code>ssh root@192.168.0.1\n</code></pre>"},{"location":"guides/wordpress-migration/#ssh-alias-and-config","title":"SSH Alias and config","text":"<p>If you prefer to use an alias to login to OLD-SRV rather than using the IP, or if you want to define a custom SSH port, you just have to create/edit the file <code>~/.ssh/config</code> and to define settings this way :</p> <pre><code>Host OLD-SRV\n  Hostname 192.168.0.1\n  Port 12345\n</code></pre> <p>Then you will be able to login with :</p> <pre><code>ssh root@OLD-SRV\n</code></pre> <p>or even with</p> <pre><code>ssh OLD-SRV\n</code></pre>"},{"location":"guides/wordpress-migration/#transfer-files-from-old-srv-to-new-srv","title":"Transfer files from OLD-SRV to NEW-SRV","text":"<p>To safely migrate files from OLD-SRV to NEW-SRV, we will use rsync because it's fast and secure (files transfer is done over SSH). If you have configured password-less SSH login with the previous steps, and defined an alias into <code>~/.ssh/config</code> you can use the following command to copy files from OLD-SRV to NEW-SRV</p> <pre><code>rsync -avzh --progress --ignore-existing \\\nroot@OLD-SRV:/var/www/mydomain.tld/htdocs/ \\\n/var/www/mydomain.tld/htdocs/\n</code></pre> <p>If you haven't created the file ~/.ssh/config and use custom SSH ports, you can define SSH port with rsync by using the following command :</p> <pre><code>rsync -avzh -e \"ssh -p 12345\" \\\n--progress --ignore-existing \\\nroot@old_server_IP:/var/www/mydomain.tld/htdocs/ \\\n/var/www/mydomain.tld/htdocs/\n</code></pre>"},{"location":"guides/wordpress-migration/#do-not-copy-the-file-wp-configphp","title":"Do not copy the file wp-config.php","text":"<p>With WordOps or EasyEngine v3, wp-config.php default path is <code>/var/www/mydomain.tld</code>. If you moved it into htdocs directory, it was probably transfered with rsync during the previous step. In this case remove it or rename it before importing the database on the new server, otherwise WP-CLI may not be able to login into MySQL.</p> <p>Command example to keep previous wp-config.php file as backup :</p> <pre><code>mv /var/www/mydomain.tld/htdocs/wp-config.php /var/www/mydomain.tld/wp-config.php.bak\n</code></pre>"},{"location":"guides/wordpress-migration/#restore-the-database-on-new-srv","title":"Restore the database on NEW-SRV","text":"<p>We will use WP-CLI to easily import the database dump we have previously created on OLD-SRV.</p> <pre><code>cd /var/www/mydomain.tld/htdocs\nwp db import my_domain_tld-2019-07-25-XX44z4.sql --allow-root\nrm mydomain_co-2019-07-25-XX44z4.sql\n</code></pre>"},{"location":"guides/wordpress-migration/#lets-encrypt","title":"Let's Encrypt","text":"<p>If your site was secured with a Let's Encrypt SSL certificate, you can issue a new certificate on NEW-SRV with the command :</p> <pre><code>wo site update mydomain.tld -le\n</code></pre>"},{"location":"how-to/add-ftp-users/","title":"How to add FTP users","text":"<p>WordOps ProFTPd stack provide the ability to install and configure automatically ProFTPd and to secure it with a self-signed certificates (same encryption level than any other valid certificate). You can install it with :</p> <pre><code>wo stack install --proftpd\n</code></pre> <p>But WordOps do not provide an easy way to add FTP users yet. So this short guide will explain how to add a new FTP user.</p> <p>Info</p> <p>This guide explain how to add new users safely, which means :</p> <ul> <li>users will not be able to login via SSH or any shell</li> <li>users will only have access to a single site files</li> </ul>"},{"location":"how-to/add-ftp-users/#adding-a-new-user","title":"Adding a new user","text":"<p>In this example we will add a new user named <code>wordops</code>, and he will only be able to access to all files of the site wordops.net :</p> <pre><code>adduser --home /var/www/wordops.net/htdocs/ \\\n--shell /bin/false --ingroup www-data wordops\n</code></pre> <p>There is another step to allow our new user to upload/edit files :</p> <pre><code>chmod -R g+rw /var/www/wordops.net/htdocs\n</code></pre>"},{"location":"how-to/allow-zip-gzip-files-download/","title":"Allow zip &amp; gzip files download","text":"<p>By default, WordOps deny access to zip, gzip and other archives format to avoid unwanted access to users's backup. If you absolutely need to download those files, you can customize WordOps Nginx configuration.</p>"},{"location":"how-to/allow-zip-gzip-files-download/#edit-nginx-configuration","title":"Edit Nginx configuration","text":""},{"location":"how-to/allow-zip-gzip-files-download/#for-all-sites","title":"For all sites","text":"<p>For both WordPress and non-WordPress sites, the first file to edit is <code>/etc/nginx/common/locations-wo.conf</code> :</p> <pre><code>nano /etc/nginx/common/locations-wo.conf\n</code></pre> <p>You will find the following directive :</p> <pre><code># Deny backup extensions &amp; log files and return 403 forbidden\nlocation ~* \"\\.(old|orig|original|php#|php~|php_bak|save|swo|aspx?|tpl|sh|bash|bak?|cfg|cgi|dll|exe|git|hg|ini|jsp|log|mdb|out|sql|svn|swp|tar|rdf|gz|zip|bz2|7z|pem|asc|conf|dump)$\" {\ndeny all;\n}\n</code></pre> <p>You just have to remove the files extensions you want to download. Then save your changes, and reload Nginx with <code>wo stack reload --nginx</code>.</p> <p>To make sure your configuration will not be overwritted later, you have to create an empty file <code>/etc/nginx/common/locations-wo.conf.custom</code> :</p> <pre><code>touch /etc/nginx/common/locations-wo.conf.custom\n</code></pre>"},{"location":"how-to/allow-zip-gzip-files-download/#for-wordpress-sites","title":"For WordPress sites","text":"<p>For WordPress sites, there is an additional configuration in <code>/etc/nginx/common/wpcommon-php7x.conf</code> where <code>7x</code> is the PHP version, it can be <code>72</code>, <code>73</code> or <code>74</code>.</p> <p>Example, for a site running with PHP 7.4 :</p> <pre><code>nano /etc/nginx/common/wpcommon-php74.conf\n</code></pre> <p>You will find the following directive :</p> <pre><code>    location ~* \\.(php|gz|log|zip|tar|rar|xz)$ {\n#Prevent Direct Access Of PHP Files &amp; Backups from Web Browsers\ndeny all;\n}\n</code></pre> <p>Do the same than in the previous example, by removing files extensions you want to download, reload Nginx and create an empty <code>.custom</code> file to make sure your custom configuration will not be overwritted.</p>"},{"location":"how-to/automate-wordops-install/","title":"How to automate WordOps installation","text":"<p>During WordOps installation, you will be prompted for a username and an email (required for git configuration). But it's pretty easy to make WordOps installation non-interactive.</p>"},{"location":"how-to/automate-wordops-install/#method-1-using-the-force-flag","title":"Method 1 : using the <code>--force</code> flag","text":"<p>To allow users to perform non-interactive installation of WordOps, we added the flag <code>--force</code> into our install script.</p> <p>This way you just have to use the following command to install WordOps without being prompted :</p> <pre><code>wget -qO wo wops.cc &amp;&amp; sudo bash wo --force\n</code></pre>"},{"location":"how-to/automate-wordops-install/#method-2-using-the-gitconfig-file","title":"Method 2 : using the .gitconfig file","text":"<p>If you prefer to configure manually git before installing WordOps, this can be done by creating a .gitconfig file in your user home directory.</p> <p>You can use the command <code>git config --global --edit</code> to create this file and edit it with your preferred text editor.</p> <p>It should look like the following example :</p> <pre><code>[user]\n       name = user\n       email = user@domain.tld\n</code></pre>"},{"location":"how-to/bypass-fastcgi-cache-on-specific-urls/","title":"How to bypass fastcgi_cache cache on specific URLs","text":"<p>Here is a couple of ways to bypass fastcgi_cache (sites created with <code>--wpfc</code>) on specific URLs.</p>"},{"location":"how-to/bypass-fastcgi-cache-on-specific-urls/#1-via-custom-nginx-config","title":"1. Via custom nginx config","text":"<p>The cache rules for fastcgi_cache are defined in <code>/etc/nginx/conf.d/map-wp-fastcgi-cache.conf</code>. First, create an empty <code>map-wp-fastcgi-cache.conf.custom</code> so that your custom rules does not get overwritten in future WordOps updates:</p> <pre><code>touch /etc/nginx/conf.d/map-wp-fastcgi-cache.conf.custom\n</code></pre> <p>Then edit <code>map-wp-fastcgi-cache.conf</code> with your custom page slugs in the <code>map $request_uri $uri_no_cache</code> block:</p> <pre><code>map $request_uri $uri_no_cache {\n....\n\"~*/resetpass/\" 1;\n\"~*/my-page-slug/\" 1;\n}\n</code></pre> <p>Reload nginx:</p> <pre><code>nginx -t &amp;&amp; systemctl reload nginx\n</code></pre>"},{"location":"how-to/bypass-fastcgi-cache-on-specific-urls/#2-via-cookie","title":"2. Via cookie","text":"<p>A possible easier way is to set a custom cookie. As defined in <code>/etc/nginx/conf.d/map-wp-fastcgi-cache.conf</code>, cache is bypassed if certain cookies are present, for example <code>wordpress_no_cache</code>.</p> <p>To take advantage of this, consider the following snippet placed in a plugin or in your theme's <code>functions.php</code>:</p> <pre><code>function set_bypass_cache_cookie() {\n    setcookie('wordpress_no_cache', '1', 0, '/my-page-slug/');\n}\nadd_action( 'init', 'set_bypass_cache_cookie');\n</code></pre> <p>Note that this method bypasses cache in all subfolders too, for example <code>/my-page-slug/subfolder/another-subfolder/</code>.</p> <p>If you would like an user interface (screenshot below) for managing URLs using the method above, take a look at this plugin.</p> <p></p>"},{"location":"how-to/configure-letsencrypt-dns-api-validation/","title":"Let's Encrypt DNS API configuration","text":"<p>WordOps uses acme.sh to handle SSL certificates, which supports domain validation using DNS API. This feature is optional to issue domain and subdomain certificates, but is required to issue wildcard certificates.</p>"},{"location":"how-to/configure-letsencrypt-dns-api-validation/#dns-api-configuration","title":"DNS API configuration","text":"<p>WordOps use the Acme client, acme.sh, to handle Let's Encrypt SSL certificates. It support DNS API with the most part of popular DNS providers, including Cloudflare, DigitalOcean, OVH, Amazon Route53, Linode, Gandi and many others.</p> <p>In this example, we will configure Cloudflare DNS API, but configuration will be pretty similar with other DNS providers.</p> <p>Info</p> <p>DNS providers list and configurations are available in acme.sh wiki</p>"},{"location":"how-to/configure-letsencrypt-dns-api-validation/#step-1-get-your-api-credentials","title":"Step 1: get your API credentials","text":"<p>Requirements:</p> <ul> <li>your Cloudflare account email address</li> <li>your Global API Key available in your Cloudflare profile</li> </ul>"},{"location":"how-to/configure-letsencrypt-dns-api-validation/#step-2-set-your-credentials-with-acmesh-variables","title":"Step 2: set your credentials with acme.sh variables","text":"<p>Before issuing your first SSL certificate with DNS API, you have to define your API credentials with the command <code>export</code> :</p> <p>Example for Cloudflare:</p> <pre><code>export CF_Key=\"sdfsdfsdfljlbjkljlkjsdfoiwje\"\nexport CF_Email=\"xxxx@sss.com\"\n</code></pre> <ul> <li>CF_Key: Cloudflare Global API key available in your Cloudflare profile</li> <li>CF_Email: Your Cloudflare account email address</li> </ul> <p>Example with DigitalOcean:</p> <pre><code>export DO_API_KEY=\"75310dc4ca779ac39a19f6355db573b49ce92ae126553ebd61ac3a3ae34834cc\"\n</code></pre> <p>Example with GoDaddy:</p> <pre><code>export GD_Key=\"sdfsdfsdfljlbjkljlkjsdfoiwje\"\nexport GD_Secret=\"asdfsdafdsfdsfdsfdsfdsafd\"\n</code></pre> <p>Info</p> <p>DNS providers list and configurations are available in the Acme.sh Wiki</p>"},{"location":"how-to/configure-letsencrypt-dns-api-validation/#step-3-issue-your-certificate","title":"Step 3: issue your certificate","text":"<p>For a new site secured with a wildcard SSL certificates with Cloudflare DNS API</p> <p>Warning</p> <p>If you are using <code>sudo</code> to run wo commands, you need to use <code>sudo -E</code> to keep DNS API crendentials variables available for acme.sh So just put <code>sudo -E</code> before the following commands instead of just <code>sudo</code>.</p> <pre><code>wo site create site.tld --wp --letsencrypt=wildcard --dns=dns_cf\n</code></pre> <ul> <li><code>--letsencrypt=wildcard</code>: issue a wildcard certificate <code>domain.tld</code> + <code>*.domain.tld</code></li> <li><code>--dns=dns_cf</code>: enable DNS API mode with Cloudflare.</li> </ul> <p>For an existant secured with a simple SSL certificate (site + www.site.tld) with DigitalOcean DNS API</p> <pre><code>wo site update site.tld -le --dns=dns_dgon\n</code></pre> <ul> <li><code>-le</code>: issue a certificate for <code>domain.tld</code> + <code>www.domain.tld</code></li> <li><code>--dns=dns_dgon</code>: enable DNS API mode with DigitalOcean</li> </ul>"},{"location":"how-to/configure-letsencrypt-dns-api-validation/#informations","title":"Informations","text":"<ul> <li>You can also use DNS API to issue domain and subdomain certificates.</li> <li><code>--dns=dns_cf</code> define the DNS provider to use. With DigitalOcean, it would be <code>--dns=dns_dgon</code></li> <li>After issuing a first certificate using DNS API, your API credentials will be saved in <code>/etc/letsencrypt/config/account.conf</code>. You do not need to define them anymore.</li> </ul>"},{"location":"how-to/configure-ufw-firewall/","title":"How to configure UFW Firewall","text":""},{"location":"how-to/configure-ufw-firewall/#install-ufw","title":"Install UFW","text":"<pre><code>sudo apt update &amp;&amp; sudo apt install ufw -y\n</code></pre>"},{"location":"how-to/configure-ufw-firewall/#check-what-is-your-ssh-port","title":"Check what is your SSH Port","text":"<pre><code>grep \"Port\" /etc/ssh/sshd_config\n</code></pre>"},{"location":"how-to/configure-ufw-firewall/#add-default-rules","title":"Add default rules","text":"<pre><code>##  enable logging\nsudo ufw logging low\n\n##  Use the default rules to allow outgoing traffic and to deny all incoming traffic.\nsudo ufw default allow outgoing\nsudo ufw default deny incoming\n\n# UFW Custom SSH Port\nCURRENT_SSH_PORT=$(grep \"Port\" /etc/ssh/sshd_config | awk -F \" \" '{print $2}')\nufw limit \"$CURRENT_SSH_PORT\"\n\n## allow SSH - DNS - HTTP and HTTPS  - NTP\nsudo ufw limit 22\nsudo ufw allow http\nsudo ufw allow https\nsudo ufw allow 123\n\n## WordOps backend\nsudo ufw limit 22222\n\n## FTP stack\nsudo ufw allow 21\nsudo ufw allow 49000:50000/tcp\n</code></pre> <p>You can check what ports are currently used on your server with the following command:</p> <pre><code>sudo netstat -tulpn\n</code></pre>"},{"location":"how-to/configure-ufw-firewall/#enabling-ufw","title":"Enabling UFW","text":"<pre><code>sudo ufw --force enable\n</code></pre>"},{"location":"how-to/define-mariadb-and-default-php-version/","title":"Define MariaDB and default PHP version","text":"<p>Wordops provide the ability to manually set the MariaDB version you want to install on your server. It support MariaDB from 10.4 to 10.11.</p> <p>You can also define the default PHP version to install and to use when you create a site without an argument like <code>--php81</code>.</p> <p>Both configurations are available in <code>/etc/wo/wo.conf</code>. On a fresh WordOps install, this file will set MariaDB version to the latest LTS release and PHP version to the current supported PHP release.</p>"},{"location":"how-to/define-mariadb-and-default-php-version/#define-mariadb-version","title":"Define MariaDB version","text":""},{"location":"how-to/define-mariadb-and-default-php-version/#before-installing-mysql-stack","title":"Before installing Mysql stack","text":"<p>On a fresh WordOps install, you can define the MariaDB version before running <code>wo stack install</code> or before creating a site requiring a database.</p> <p>To do so, you just have to open <code>/etc/wo/wo.conf</code> with your favorite text editor.</p> <pre><code>sudo nano /etc/wo/wo.conf\n</code></pre> <p>At the bottom of the file, you will find the following block :</p> <pre><code>[mariadb]\n\n### Default MariaDB release\nrelease = 10.11\n</code></pre> <p>To define MariaDB version, just edit the release number.</p> <p>WordOps support MariaDB version from <code>10.4</code> up to <code>10.11</code>.</p>"},{"location":"how-to/define-mariadb-and-default-php-version/#to-upgrade-mariadb","title":"To upgrade MariaDB","text":"<p>WordOps give you the ability to upgrade MariaDB with the command <code>wo stack migrate --mariadb</code>. You can define the MariaDB version you want to upgrade to the same way than the exemple above.</p> <p>Warning</p> <p>It's not possible to downgrade MariaDB, so before upgrading MariaDB, please make sure all your apps are compatible with the release you want to install.</p>"},{"location":"how-to/define-mariadb-and-default-php-version/#define-php-version","title":"Define PHP version","text":"<p>On a fresh install as well as on an existant server, you can at anytime set the default PHP version to use when you create new sites.</p> <p>To do so, you just have to open <code>/etc/wo/wo.conf</code> with your favorite text editor.</p> <pre><code>sudo nano /etc/wo/wo.conf\n</code></pre> <p>At the bottom of the file, you will find the following block :</p> <pre><code>[php]\n\n### Default PHP version\nversion = 8.1\n</code></pre> <p>If you want another PHP version than the one set in this file, just edit the version number.</p> <p>Warning</p> <p>Please make sure WordOps support the php version you are going to use.</p>"},{"location":"how-to/enable-brotli-compression-with-nginx/","title":"How to enable/disable brotli compression with Nginx","text":"<p>Since WordOps release v3.21.0, you can enable or disable brotli compression with Nginx with the following commands :</p> <pre><code># enable brotli compression\nwo stack install --brotli\n\n## disable brotli compression\nwo stack remove --brotli\n</code></pre> <p></p> <p>Brotli compression is not enabled by default in WordOps, our default configuration use GZIP compression. If you enable then disable Brotli compression, WordOps will use GZIP back.</p>"},{"location":"how-to/get-a-plus-grade-ssllabs/","title":"How to get an A+ Grade on ssllabs with WordOps","text":"<p>This tutorial describe how to get the best SSL grade on ssllabs.com. To get an A+, it require to enable HSTS (HTTP Strict Transport Security). HSTS allows web servers to declare that web browsers should only interact with it using HTTPS connections and never via the insecure HTTP protocol.</p> <p>Warning</p> <p>Make sure your site/domain and subdomains will never need to use HTTP again, because after accessing a single time to your site with HSTS enabled, your web browser will not allow you to access it over http if you remove the SSL certificate for example.</p>"},{"location":"how-to/get-a-plus-grade-ssllabs/#issue-an-ssl-certificate-with-wordops-and-enable-hsts","title":"Issue an ssl certificate with WordOps and enable HSTS","text":""},{"location":"how-to/get-a-plus-grade-ssllabs/#for-a-new-site","title":"For a new site","text":"<p>For a domain or a subdomain</p> <pre><code>wo site create site.tld --wp -le --hsts\n</code></pre> <p>For a multisite</p> <pre><code>wo site create site.tld --wpsubdom -le=wildcard --hsts\n</code></pre>"},{"location":"how-to/get-a-plus-grade-ssllabs/#for-an-existant-site-without-ssl","title":"For an existant site without SSL","text":"<p>For a domain or a subdomain</p> <pre><code>wo site update site.tld -le --hsts\n</code></pre> <p>For a multisite</p> <pre><code>wo site update site.tld -le=wildcard --hsts\n</code></pre>"},{"location":"how-to/get-a-plus-grade-ssllabs/#for-an-existant-site-already-secured-with-lets-encrypt","title":"For an existant site already secured with Let's Encrypt","text":"<p>For a domain or a subdomain</p> <pre><code>wo site update site.tld --hsts\n</code></pre> <p>For a multisite</p> <pre><code>wo site update site.tld --hsts\n</code></pre> <p>Congratulations, you can now check your grade on https://www.ssllabs.com/ssltest/</p>"},{"location":"how-to/get-a-plus-grade-ssllabs/#switching-hsts-off","title":"Switching HSTS off","text":"<p>It's not recommended to disable HSTS because web browser will store the HSTS directive for a long time (6 months) and will not allow access over HTTP even after disabling HSTS on the server. However, if you absolutely need to disable HSTS, you can use the following command:</p> <pre><code>wo site update site.tld --hsts=off\n</code></pre>"},{"location":"how-to/get-a-plus-grade-ssllabs/#hardening-hsts","title":"Hardening HSTS","text":"<p>You can increase even more your site security by enabling HSTS preloading on your domain. It's the same than HSTS, but this time your domain will be directly added into the hstspreload.org list and web browsers will enable HSTS even without accessing to your site.</p> <p>This can be done on https://hstspreload.org</p>"},{"location":"how-to/issue-wildcard-ssl-certificate/","title":"How to issue a wildcard SSL certificate ?","text":""},{"location":"how-to/microcaching-with-nginx/","title":"Microcaching with Nginx","text":""},{"location":"how-to/microcaching-with-nginx/#context","title":"Context","text":"<p>This guide applies to WordPress sites with Nginx fastcgi_cache (created with <code>--wpfc</code>). WordOps cache pages for 24 hours, as set in <code>/etc/nginx/conf.d/fastcgi.conf</code>:</p> <pre><code>fastcgi_cache_valid 200 24h;\n</code></pre> <p>This works very well on pages where you have content that rarely changes. But what if you have a page (or pages) with dynamic content? What if you have a page that queries an external API and stores the result somewhere? Looking for an alternative to WordPress Transients API?</p> <p>One solution is to use microcaching in Nginx where the page only is cached for a couple of minutes. This way your server can handle bursts of traffic while still serving dynamic content.</p>"},{"location":"how-to/microcaching-with-nginx/#getting-started","title":"Getting started","text":"<p>Nginx lets you set dynamic cache expiration times with the <code>X-Accel-Expires</code> header. So if you have a specific page you want to microcache, consider this snippet placed in a plugin or in your theme's <code>functions.php</code>:</p> <pre><code>function add_expires_header( $headers, $wp ) {\n    if ( 0 === strpos( $wp-&gt;request, 'sample-page' ) ) {\n        $headers['X-Accel-Expires'] = '120';\n    }\n    return $headers;\n}\nadd_filter( 'wp_headers', 'add_expires_header', 10, 2 );\n</code></pre> <p>This sets the TTL (time to live) on the URL <code>https://domain.tld/sample-page</code> for 2 minutes (120 seconds). Remember to purge any existing cache so that the new <code>X-Accel-Expires</code> header is registered by Nginx:</p> <pre><code>wp nginx-helper purge-all --path=/var/www/domain.tld/htdocs\n</code></pre>"},{"location":"how-to/microcaching-with-nginx/#testing","title":"Testing","text":"<p>On the first request, Nginx returns <code>x-fastcgi-cache: MISS</code>, caches the page, and registers the TTL. Note that <code>X-Accel-Expires</code> is an internal header, and does not get outputted in the header:</p> <pre><code>curl -Ik https://domain.tld/sample-page/\nHTTP/2 200\nserver: nginx\n...\nx-fastcgi-cache: MISS\n</code></pre> <p>On the next request, Nginx returns <code>x-fastcgi-cache: HIT</code>:</p> <pre><code>curl -Ik https://domain.tld/sample-page/\nHTTP/2 200\nserver: nginx\n...\nx-fastcgi-cache: HIT\n</code></pre> <p>After 2 minutes, Nginx returns <code>x-fastcgi-cache: STALE</code>, which means it begins to fetch a new version in the background:</p> <pre><code>curl -Ik https://domain.tld/sample-page/\nHTTP/2 200\nserver: nginx\n...\nx-fastcgi-cache: STALE\n</code></pre> <p>Any requests before Nginx is finished, gets served with the old cached version, returning <code>x-fastcgi-cache: UPDATING</code>:</p> <pre><code>curl -Ik https://domain.tld/sample-page/\nHTTP/2 200\nserver: nginx\n...\nx-fastcgi-cache: UPDATING\n</code></pre> <p>When Nginx is done fetching in the background, the cache is updated with the new version of the page, and returns <code>x-fastcgi-cache: HIT</code> once again.</p> <p>This technique is superuseful, especially on slow pages with dynamic content.</p>"},{"location":"how-to/microcaching-with-nginx/#wordpress-rest-api","title":"WordPress REST API","text":"<p>Microcaching is also very effective if you have a custom REST API endpoint serving dynamic data. But you have to use a different filter since <code>wp_headers</code> is not used for API requests. For example:</p> <pre><code>function add_expires_header( $served, $result, $request ) {\n    if ( strpos( $request-&gt;get_route(), '/custom_endpoint' ) === 0 ) {\n        header('X-Accel-Expires: 120');\n    }\n}\nadd_filter( 'rest_pre_serve_request', 'add_expires_header', 10, 3 );\n</code></pre>"},{"location":"how-to/post-install-wp/","title":"Automate WordPress post-install","text":"<p>There are multiple, viable approaches to automate post-installation of a WordPress blog using WordOps, without the need of adding new commands or increasing overall complexity.</p> <p>For this tutorial, we're going to show how to automatically install plugins and themes from official WordPress repository, as well as how to install custom plugins and themes, not available at wordpress.org.</p>"},{"location":"how-to/post-install-wp/#first-thing-first-configuring-the-custom-repository","title":"First thing first: configuring the \"custom\" repository","text":"<p>The custom plugins and themes you're going to install on your newly installed blogs must be publicly available on a particular location of your knowledge. It's from there that our script will fetch them to add to WordPress.</p> <p>For example, one could store their custom plugins and themes in a GitHub repository. Or they could be available through public links in Google Drive, Dropbox, or even in a website set up just for serving this purpose \u2014 this is the approach this tutorial will cover.</p> <p>We'll save our plugins and themes in zip format, just following the standard. For this example, assume the subdomain <code>downloads.sarmento.org</code> is our repository, and the files are saved at the root level.</p> <p>Examples:</p> <ul> <li><code>https://downloads.sarmento.org/customplugin.zip</code></li> <li><code>https://downloads.sarmento.org/awesometheme.zip</code></li> </ul>"},{"location":"how-to/post-install-wp/#the-script-itself","title":"The script itself","text":"<p>Save your script at an easy to remember location, e.g. <code>/scripts/post-wp-install.sh</code> and give it execution permission:</p> <pre><code>chmod +x /scripts/post-wp-install.sh\n</code></pre> <p>The contents of the script should be something like this, adapted to your own needs, of course:</p> <pre><code>#! /bin/bash\n\nDOM=$1\nif test -z $DOM ; then\necho \"ERROR: no domain informed!\"\nexit 1\nfi\n\nif [ ! -e \"/var/www/${DOM}/wp-config.php\" ] ; then\necho \"ERROR: ${DOM} does not appear to be a valid WordPress!\"\nexit 1\nfi\n\ncd \"/var/www/${DOM}/htdocs\" || exit 1\n\n### Install plugins from official repository\nwp plugin install wordpress-seo --allow-root --activate\nwp plugin install wordpress-hide-login --allow-root --activate\n\n### Install custom plugin\nwp plugin install https://downloads.sarmento.org/customplugin.zip --allow-root\nwp plugin activate customplugin --allow-root\n\n### Install custom theme\nwp theme install https://downloads.sarmento.org/awesometheme.zip --allow-root\nwp theme activate awesometheme --allow-root\n\n### Fix permissions\nchown www-data:www-data wp-content -R\ncd -\n\nexit 0\n</code></pre>"},{"location":"how-to/post-install-wp/#example-of-how-to-use-the-script","title":"Example of how to use the script","text":"<pre><code># install the blog\nwo site create thedomain.com --wpredis --php73\n\n# run the script\n/scripts/post-wp-install.sh thedomain.com\n</code></pre>"},{"location":"how-to/post-install-wp/#notes-about-the-script","title":"Notes about the script","text":"<p>Except for the two \"ifs\" that check whether the domain was informed as a parameter and whether it is a valid WordPress, there is no complicated logic, just a sequence of commands.</p> <p>It is the most simple and effective way of standardizing the post installation of blogs using the tools already included in WordOps.</p>"},{"location":"how-to/remote-mysql-server/","title":"Use WordOps with a remote MySQL server","text":"<p>By default, if there is no local MySQl server available, WordOps will install MySQL stack for any site that require a MySQL database. But you can easily configure WordOps to use a remote MySQL server. Here the steps to follow.</p>"},{"location":"how-to/remote-mysql-server/#install-mysql-client","title":"Install MySQL client","text":"<p>This can be done with the command :</p> <pre><code>wo stack install --mysqlclient\n</code></pre>"},{"location":"how-to/remote-mysql-server/#allow-remote-root-connection-on-the-remote-server","title":"Allow remote root connection on the remote server","text":"<p>Login into your remote MySQL server and grant privileges to root from a remote address :</p> <pre><code># allow root from any address with %\nmysql -e \"grant all privileges on *.* to 'root'@'%'  IDENTIFIED BY 'your-very-strong-password' with grant option;\"\n\n# allow root access from a specific address (192.168.1.60)\nmysql -e \"grant all privileges on *.* to 'root'@'192.168.1.60'  IDENTIFIED BY 'your-very-strong-password' with grant option;\"\n</code></pre> <p>Then apply changes with :</p> <pre><code># flush privileges to appply changes\nmysql -e \"flush privileges;\"\n</code></pre> <p>Also make sure the line <code>bind 127.0.0.1</code> is commented in /etc/mysql/my.cnf. Otherwise, comment it and restart mysql.</p>"},{"location":"how-to/remote-mysql-server/#set-remote-mysql-server-credentials","title":"Set remote MySQL server credentials","text":"<p>On your WordOps server, create the file <code>/etc/mysql/conf.d/my.cnf</code> and set your remote MySQL server crendentials, it should look like this example :</p> <pre><code>[client]\nhost = 192.168.1.10\nuser = root\npassword = your-very-strong-password\n</code></pre>"},{"location":"how-to/remote-mysql-server/#update-wordops-configuration","title":"Update Wordops configuration","text":"<p>This is the last step to use your remote MySQL server, update the variable <code>grant-host</code> in <code>/etc/wo/wo.conf</code> by replacing <code>localhost</code> by <code>%</code> or your server IP.</p> <pre><code>[mysql]\n\n### MySQL database grant host name\ngrant-host = %\n</code></pre>"},{"location":"how-to/secure-22222/","title":"How to secure WordOps backend with Let's Encrypt SSL certificate","text":""},{"location":"how-to/secure-22222/#secure-wordops-backend-automatically","title":"Secure WordOps backend automatically","text":"<p>From the release v3.9.8.1 and onward, WordOps will automatically secure the backend on port 22222 with the first SSL certificate issued on the server. So you just have to create basic site with the arguments <code>--letsencrypt</code> or <code>-le</code> to secure the backend.</p> <p>Example :</p> <p>if your server hostname is properly configured (read below), you can use :</p> <pre><code>wo site create server.domain.tld -le\n</code></pre> <p>Then you will be able to access to the backend with the adress : <code>https://server.domain.tld:22222</code></p> Proper server hostname configuration <p>Server hostname isn't only a name, it's the server public identity on the network. If your server is directly connected to internet(not behind a NAT), it should have a valid hostname.</p> <p>A valid hostname should looks like : myservername.yourdomain.tld</p> <ul> <li>myservername is the server name</li> <li>yourdomain.tld is one of your domains</li> </ul> <p>To edit hostname properly, use the command :</p> <pre><code>hostnamectl set-hostname &lt;yourserver.hostname.tld&gt;\n</code></pre> <p>To apply the new hostname, a reboot is required. The last step and the most important, you should create the proper DNS records to make the subdomain myservername.yourdomain.tld pointing to your server IP.</p>"},{"location":"how-to/secure-22222/#using-another-certificate","title":"Using another certificate","text":""},{"location":"how-to/secure-22222/#secure-wordops-backend-with-the-same-certificate-than-another-site","title":"Secure WordOps backend with the same certificate than another site","text":"<p>If you already have a site secured with Let's Encrypt, you just have to copy the <code>ssl.conf</code> file stored in <code>/var/www/site.tld/conf/nginx</code>.</p> <pre><code>DOMAIN_NAME=site.ltd\nsudo grep \"ssl_\" \\\n/var/www/${DOMAIN_NAME}/conf/nginx/ssl.conf &gt; /var/www/22222/conf/nginx/ssl.conf\n</code></pre> <p>Then reload Nginx:</p> <pre><code>wo stack restart --nginx\n</code></pre> <p>You should now be able to access to WordOps backend on <code>https://site.tld:22222</code></p>"},{"location":"how-to/secure-22222/#issue-a-new-certificate-to-secure-wordops-backend","title":"Issue a new certificate to secure WordOps backend","text":"<p>If you prefer to issue manually a new Let's Encrypt SSL certificate, here the steps to follow:</p> <p>Set your domain or subdomain as a variable:</p> <pre><code>DOMAIN_NAME=backend.site.ltd\n</code></pre> <p>Issue the certificate</p> <pre><code>acme.sh --issue -d $DOMAIN_NAME -k ec-384 -w /var/www/html\n</code></pre> <p>If the certificate as issued successfully, create a directory to store the certificate</p> <pre><code>sudo mkdir -p /etc/letsencrypt/live/${DOMAIN_NAME}\n</code></pre> <p>Install the certificate</p> <pre><code>acme.sh --install-cert -d $DOMAIN_NAME --ecc \\\n--cert-file /etc/letsencrypt/live/$DOMAIN_NAME/cert.pem \\\n--key-file /etc/letsencrypt/live/$DOMAIN_NAME/key.pem \\\n--fullchain-file /etc/letsencrypt/live/$DOMAIN_NAME/fullchain.pem \\\n--ca-file /etc/letsencrypt/live/$DOMAIN_NAME/ca.pem \\\n--reloadcmd \"nginx -t &amp;&amp; systemctl restart nginx.service\"\n</code></pre> <p>Create the Nginx configuration</p> <pre><code>cat &lt;&lt;EOF &gt;/var/www/22222/conf/nginx/ssl.conf\n    ssl_certificate /etc/letsencrypt/live/$DOMAIN_NAME/fullchain.pem;\n    ssl_certificate_key     /etc/letsencrypt/live/$DOMAIN_NAME/key.pem;\n    ssl_trusted_certificate /etc/letsencrypt/live/$DOMAIN_NAME/ca.pem;\nEOF\n</code></pre> <p>Then reload nginx</p> <pre><code>wo stack restart --nginx\n</code></pre>"},{"location":"how-to/setup-basic-auth/","title":"Setup basic auth on site","text":""},{"location":"how-to/setup-basic-auth/#prerequisites","title":"Prerequisites","text":"<p>Install Apache Utilities:</p> <pre><code>apt install apache2-utils\n</code></pre>"},{"location":"how-to/setup-basic-auth/#create-password-file","title":"Create password file","text":"<pre><code>htpasswd -c /var/www/domain.tld/conf/nginx/.htpasswd username\n</code></pre> <p>You will be asked to supply and confirm a password for the user.</p>"},{"location":"how-to/setup-basic-auth/#configure-nginx","title":"Configure nginx","text":"<p>Edit <code>/var/www/domain.tld/conf/nginx/auth.conf</code>:</p> <pre><code>auth_basic \"Restricted Access\";\nauth_basic_user_file /var/www/domain.tld/conf/nginx/.htpasswd;\n</code></pre> <p>Reload nginx:</p> <pre><code>wo stack reload --nginx\n</code></pre>"},{"location":"how-to/setup-sendmail-with-sendgrid/","title":"Setup Sendmail with Sendgrid","text":"<p>How to setup Sendmail MTA (Mail Transport Agent) on server to use Sendgrid SMTP.</p>"},{"location":"how-to/setup-sendmail-with-sendgrid/#prerequisites","title":"Prerequisites","text":"<p>Install required packages.</p> <pre><code>wo stack install --sendmail\napt install libsasl2-modules\n</code></pre>"},{"location":"how-to/setup-sendmail-with-sendgrid/#1-sendgrid-api-key","title":"1. Sendgrid API key","text":"<p>Create a new Sendgrid API key (if not already created).</p>"},{"location":"how-to/setup-sendmail-with-sendgrid/#2-create-auth-file","title":"2. Create Auth File","text":"<pre><code>mkdir /etc/mail/authinfo\nchmod 700 /etc/mail/authinfo\n</code></pre> <p>Create <code>/etc/mail/authinfo/smtp-auth</code> and add the following content:</p> <pre><code>AuthInfo: \"U:root\" \"I:apikey\" \"P:API_KEY\"\n</code></pre> <p>Create a hash map file of above created auth file.</p> <pre><code>makemap hash /etc/mail/authinfo/smtp-auth &lt; /etc/mail/authinfo/smtp-auth\n</code></pre>"},{"location":"how-to/setup-sendmail-with-sendgrid/#3-configure-sendmail-with-smart_host","title":"3. Configure Sendmail with SMART_HOST","text":"<p>Add the following configuration lines into <code>/etc/mail/sendmail.mc</code> after <code>MAILER_DEFINITIONS</code> and before <code>MAILER(`local')dnl</code> at the bottom.</p> <pre><code>define(`SMART_HOST',`[smtp.sendgrid.com]')dnl\ndefine(`RELAY_MAILER_ARGS', `TCP $h 587')dnl\ndefine(`ESMTP_MAILER_ARGS', `TCP $h 587')dnl\ndefine(`confAUTH_OPTIONS', `A p')dnl\nTRUST_AUTH_MECH(`EXTERNAL DIGEST-MD5 CRAM-MD5 LOGIN PLAIN')dnl\ndefine(`confAUTH_MECHANISMS', `EXTERNAL GSSAPI DIGEST-MD5 CRAM-MD5 LOGIN PLAIN')dnl\nFEATURE(`authinfo',`hash -o /etc/mail/authinfo/smtp-auth.db')dnl\n</code></pre> <p>Re-build sendmail's configuration:</p> <pre><code>make -C /etc/mail\n</code></pre>"},{"location":"how-to/setup-sendmail-with-sendgrid/#4-verify-setup","title":"4. Verify setup","text":"<pre><code>service sendmail reload\n</code></pre> <p>Send test email to name@domain.tld:</p> <pre><code>sendmail name@domain.tld\nSubject: Test\nThis is the body of the test email.\n</code></pre> <p>Press <code>control + d</code> to send.</p>"},{"location":"how-to/ubuntu-lts-hwe-stacks/","title":"LTS Enablement Stacks","text":"<p>The Ubuntu LTS enablement (also called HWE or Hardware Enablement) stacks provide newer kernel and X support for existing Ubuntu LTS releases.</p>"},{"location":"how-to/ubuntu-lts-hwe-stacks/#how-to-install-hwe-stacks-on-ubuntu","title":"How to install HWE stacks on Ubuntu","text":"<p>To enable HWE stacks on Ubuntu 18.04 LTS, you just have to run the following command :</p> <pre><code>sudo apt-get install --install-recommends linux-generic-hwe-18.04 -y\n</code></pre> <p>After the install process, you will just have to reboot your server to boot on the new kernel :</p> <pre><code>sudo shutdown -r now\n</code></pre>"},{"location":"how-to/wordops-server-maintenance/","title":"WordOps server maintenance","text":"<p>If you are using WordOps to host some sites, you have to understand server maintenance is a regular and required task to perform.</p>"},{"location":"how-to/wp-language/","title":"How to set default language for WordPress install","text":"<p>WordOps uses WP-CLI to install and perform other tasks on WordPress blogs.</p> <p>The default language for new blogs is <code>en_US</code> but it can be easily adapted to any other locale.</p> <p>WP-CLI expects a configuration file to be placed on <code>~/.wp-cli/config.yml</code>. We won't cover all its possibilities right now, only the configuration required to customize the localisation.</p> <p>For example, in order to have WordPress in Brazilian Portuguese the <code>config.yml</code> file would be:</p> <pre><code>core download:\nlocale: pt_BR\n</code></pre>"},{"location":"how-to/wp-language/#caveats","title":"Caveats","text":"<p>There is a \"caveat\" one should be aware of: when a new version os WordPress is released it usually does not have translations for all possible locales. Setting up a configuration file like the suggestion above might lead to WP-CLI (thus WordOps) to behave inconsistently.</p>"},{"location":"how-to/wp-language/#how-to-change-locale-of-a-blog-already-installed","title":"How to change locale of a blog already installed","text":"<p>In order to avoid such inconsistence, perhaps it's wiser to install WP in <code>en_US</code> as usual, then later change its locale. The root user would do:</p> <pre><code>cd /var/www/example.com/htdocs\nwp language core install pt_BR --activate --allow-root\ncd wp-content\nchown www-data:www-data languages -R\n# the languages folder is created with owner / group root by the wp language call, this allows update of translations from the dashboard updates page\n</code></pre>"},{"location":"security/recommendations/","title":"Security recommendations","text":"<p>In this section, you will find few guides/tutorials about server security and what are the best ways to avoid security issues on your server(s)/site(s).</p>"},{"location":"security/recommendations/#enable-automatic-installation-of-security-upgrades","title":"Enable automatic installation of security upgrades","text":"<p>Debian and Ubuntu provide an automated security upgrades service with the package automatic installation of security upgrades unattended-upgrades. You can enable automatic installation of security upgrades with the command:</p> <pre><code>sudo dpkg-reconfigure -plow unattended-upgrades\n</code></pre>"},{"location":"troubleshooting/bug-reporting/","title":"Bug reporting guidelines","text":"<p>You are facing an issue with WordOps ? Please ask you the following questions before opening an issue on Github or creating a post on the forum :</p> <ul> <li>Are you using the latest release of WordOps ? -&gt; if not, update WordOps first and try again to see if your issue still exist.</li> <li>Is it a known issue ? -&gt; use the search feature in the documentation, check the page common issues, and take a look in the forum posts and in Github issues to check if it's a known issue</li> <li>Have you checked the logs ? -&gt; always check the content of <code>/var/log/wo/wordops.log</code> to check what is exactly the task which failed</li> <li>Is the issue directly related to WordOps ? -&gt; for questions or support, please use the community forum.</li> </ul> <p>Then, if the issue still exist and if there is no solution or workaround available, feel free to open an issue on Github</p>"},{"location":"troubleshooting/common-issues/","title":"Common issues","text":""},{"location":"troubleshooting/common-issues/#the-command-wo-update-failed","title":"The command <code>wo update</code> failed","text":"<p>If you have any issue when you want to update WordOps, do not hesitate to use the initial install command :</p> <pre><code>wget -qO wo wops.cc &amp;&amp; sudo bash wo\n</code></pre>"},{"location":"troubleshooting/common-issues/#wordops-failed-to-issue-ssl-certificate","title":"WordOps failed to issue SSL certificate","text":"<p>If you are using DNS API validation :</p> <ul> <li>Make sure your API credentials has been properly saved by acme.sh in <code>/etc/letsencrypt/config/account.conf</code></li> <li>Check acme.sh documentation about DNS API to see if there are changes with your DNS API Provider : https://github.com/Neilpang/acme.sh/wiki/dnsapi</li> </ul> <p>If you are using the default webroot validation :</p> <p>Make sure your domain is pointing to your server IP as well as <code>www</code> alias if it's not a subodmain</p> <p>If you are behind a load-balancer or a proxy, and need to force WO to issue a certificate even if the domain doesn't resolve your server IP, you can use the flag <code>--force</code></p> <pre><code>wo site update site.tld -le --force\n</code></pre> <p>Then if you need to cleanup the previous SSL certificate, you can use the following command to remove existant certificates and keys, as well as other Nginx configurations for your domain:</p> <pre><code>wo site update site.tld --letsencrypt=clean\n</code></pre>"},{"location":"troubleshooting/common-issues/#when-i-update-a-page-changes-are-not-applied-on-the-site","title":"When I update a page, changes are not applied on the site","text":"<p>If you are using Nginx fastcgi_cache, please make sure:</p> <ul> <li>Nginx-helper plugin is enabled</li> <li>the option \"purge cache\" is enabled in Settings &gt; Nginx-Helper</li> <li>the caching method is defined on Nginx Fastcgi cache</li> </ul> <p>If you are using Redis-cache, please make sure:</p> <ul> <li>Nginx-helper plugin is enabled</li> <li>the option \"purge cache\" is enabled in Settings &gt; Nginx-Helper</li> <li>the caching method is defined on Redis Cache</li> <li>the prefix defined is <code>nginx-cache:</code></li> </ul>"},{"location":"troubleshooting/common-issues/#wordops-commands-are-not-working","title":"WordOps commands are not working","text":"<p>If the error output looks like:</p> <pre><code>Traceback (most recent call last):\n  File \"/usr/local/bin/wo\", line 6, in &lt;module&gt;\n    from pkg_resources import load_entry_point\n  File \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\", line 3088, in &lt;module&gt;\n    @_call_aside\n  File \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\", line 3072, in _call_aside\n    f(*args, **kwargs)\nFile \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\", line 3101, in _initialize_master_working_set\n    working_set = WorkingSet._build_master()\nFile \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\", line 574, in _build_master\n    ws.require(__requires__)\nFile \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\", line 892, in require\n    needed = self.resolve(parse_requirements(requirements))\nFile \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\", line 778, in resolve\n    raise DistributionNotFound(req, requirers)\npkg_resources.DistributionNotFound: The 'wo==3.9.8.2' distribution was not found and is required by the application\n</code></pre> <p>Just remove the executable <code>/usr/local/bin/wo</code> and reinstall WordOps:</p> <pre><code>sudo rm -f /usr/local/bin/wo &amp;&amp; wget -qO wo wops.cc &amp;&amp; sudo bash wo\n</code></pre> <p>If the issue still persist, open an issue on the GitHub repository.</p>"}]}